{"version":3,"sources":["assets/Script/Boot.js","assets/Script/Define/Config.js","assets/Script/Util/FBInstantHelper.js","assets/Script/Manager/GSMgr.js","assets/Script/Game/GameMgr.js","assets/Script/Define/Global.js","assets/Script/Singleton/ImageCache.js","assets/Script/Loading.js","assets/Script/UI/MenuGame.js","assets/Script/UI/MenuScene.js","assets/Script/UI/OnlineList.js","assets/Script/UI/OnlinePlayer.js","assets/Script/UI/SeatDisplay.js","assets/Script/UI/SeatMgr.js","assets/Script/Define/ServerCode.js","assets/Script/Manager/UIManager.js"],"names":["cc","Class","extends","Component","properties","loadingBar","ProgressBar","start","this","startLoading","loadResource","ImageCache","Init","InitGameSpark","bind","GSMgr","instance","LoginServer","progress","userId","FBInstantHelper","getPlayerID","authenticationRequest","OnTryLogin","response","error","playerName","getPlayerName","playerPhoto","getPlayerPhoto","registrationRequest","OnTryRegister","EnterRoom","groupId","getContextID","enterRoomRequest","onEnterRoomResponse","console","log","WaitMatchData","GameMgr","onMatchLoaded","LoadGameScene","director","preloadScene","Finished","loadScene","Config","API_Key","API_Secret","module","exports","FBFakeData","context","id","player","name","photo","isReady","FBInstant","onPause","callback","onQuitGame","quit","onShareGame","shareAsync","intent","image","getImgBase64","text","data","myReplayData","then","getID","getName","getPhoto","logEventTracking","eventName","valueToSum","param","logEvent","APIKey","String","Secret","statics","ctor","onLoad","game","addPersistRootNode","node","RTMessagesListeners","Inited","GameSparks","callbackInit","initPreview","key","secret","credential","onNonce","onInit","onMessage","logger","initRTSession","nonce","CryptoJS","enc","Base64","stringify","HmacSHA256","message","OnMatchFound","accessToken","host","port","myRTSession","stop","myTimer","clearTimeout","setInterval","mainRTLoop","OnMatchUpdate","displayName","username","password","onResponse","request","InstantID","Photo","sendWithData","gameType","groupName","createChallengeRequest","shortCode","minPlayers","maxPlayers","numCycles","started","onPlayerConnect","onPlayerConnected","onPlayerDisconnect","onPlayerDisconnected","onReady","onSessionReady","onPacket","onPacketReceived","session","startRTSession","stopRTSession","res","triggerCallback","opCode","connectToken","index","indexOf","theHost","slice","GameSparksRT","getSession","peers","activePeers","peerId","update","RTData","get","setLong","sendRTData","deliveryIntent","RELIABLE","registerOpCodeCallback","push","listeners","i","code","requestSeat","seat","ServerCode","RQ_ENTER_SEAT","matchData","RP_ENTER_SEAT","onPlayerEnterSeat","RP_LEAVE_SEAT","onPlayerLeaveSeat","RP_LOAD_MATCH","onMatchLoad","RP_HOST_CHANGE","onHostChange","startGameScene","JSON","onlineList","participants","hasOwnProperty","filter","addedPlayers","UIManager","addPlayer","_player","removedPlayers","removePlayer","onMatchLoadedCb","parse","getString","getCurrentSeats","Seats","getPlayer","getOnlineList","getHost","Host","playerId","getLong","playerEnterSeat","playerLeaveSeat","setHost","window","require","cachedImages","addRes","path","_this","loader","loadRes","err","img","load","URL","_this2","addImage","warn","getImage","loadAvatar","_this3","SpriteFrame","getSprite","loadingTimeout","timeout","show","active","hide","dt","MenuScene","SeatMgr","sender","parseInt","playerInfo","onPlayerEnter","onPlayerLeave","listNode","Node","onlinePlayer","Prefab","list","forEach","it","playerNode","instantiate","getComponent","display","scriptData","parent","getChildByName","destroy","avatar","Sprite","Label","string","imgSprite","spriteFrame","displayNode","userName","money","hostIcon","getPlayerId","remove","isHost","seats","children","length","seatDisplay","RQ_LOAD_MATCH","RQ_LEAVE_SEAT","RP_REQUEST_ERROR","ERROR_DUPLICATED_SEAT","Loading","loadingscreen","MenuGame","MenuStack","CurrentMenu","showLoading","showMenu","menuName","closeCurrent","arguments","undefined","menu","lastMenu","splice","closeCurrentMenu","nextMenu","closeAllMenu","childs","element","initOnlineList"],"mappings":"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","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        loadingBar: cc.ProgressBar,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.startLoading();\n    },\n\n    startLoading()\n    {\n        this.loadResource();\n    },\n\n    loadResource()\n    {\n        ImageCache.Init(this.InitGameSpark.bind(this));\n    },\n\n    InitGameSpark()\n    {\n        GSMgr.instance.Init(this.LoginServer.bind(this));\n        this.loadingBar.progress = 0.6;\n    },\n\n    LoginServer()\n    {      \n        this.userId = FBInstantHelper.getPlayerID();\n        GSMgr.instance.authenticationRequest(this.userId, this.userId, this.OnTryLogin.bind(this));\n    },\n\n    OnTryLogin(response)\n    {\n        if (response.error)\n        {\n            let playerName = FBInstantHelper.getPlayerName();\n            let playerPhoto = FBInstantHelper.getPlayerPhoto();\n            GSMgr.instance.registrationRequest(playerName, this.userId, this.userId, playerPhoto, this.OnTryRegister.bind(this));\n        }\n        else\n        {\n            this.EnterRoom();\n        }\n    },\n\n    OnTryRegister(response)\n    {\n        if (!response.error)\n        {\n            this.EnterRoom();\n        }\n        else\n        {\n            //pop up error\n        }\n    },\n\n    EnterRoom()\n    {\n        var groupId = FBInstantHelper.getContextID();\n        GSMgr.instance.enterRoomRequest(\"Kill_13\", groupId, this.onEnterRoomResponse.bind(this));\n    },\n\n    onEnterRoomResponse(response)\n    {\n        console.log(response);\n        if (!response.error)\n        {\n            this.WaitMatchData();\n        }\n    },\n\n    WaitMatchData() //it's sent automatically when user enter room\n    {\n        GameMgr.instance.onMatchLoaded(this.LoadGameScene.bind(this));\n    },\n\n    LoadGameScene()\n    {\n        cc.director.preloadScene(\"Game\", this.Finished);\n        this.loadingBar.progress = 1;\n    },\n\n    Finished()\n    {\n        cc.director.loadScene(\"Game\");\n    }\n});\n","var Config = {\n    API_Key : \"j356603E53FA\",\n    API_Secret : \"SCWcCimJ27E9MWBwAXn2kJ9lKes90KiC\"\n}\n\nmodule.exports = Config;","var FBFakeData = {\n    \"context\":{\n        \"id\":\"1991595654288655\",\n    },\n    \"player\":{\n        \"name\":\"Mayc\",\n        \"id\":\"TestUser03\",\n        \"photo\":\"default\"\n    }\n};\n\nvar FBInstantHelper = cc.Class({\n\n    isReady () {\n        return typeof FBInstant !== 'undefined';\n    },\n\n    onPause(callback)\n    {\n        if (this.isReady())\n        {\n            FBInstant.onPause(callback);\n        }\n    },\n\n    onQuitGame () {\n        if (typeof FBInstant === 'undefined') return;\n            FBInstant.quit();\n    },\n\n    onShareGame () {\n        if (typeof FBInstant === 'undefined') return;\n        FBInstant.shareAsync({\n            intent: 'SHARE',\n            image: this.getImgBase64(),\n            text: 'X is asking for your help!',\n            data: {myReplayData: '...'},\n        }).then(() => {\n            // continue with the game.\n        });\n    },\n\n    getContextID()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.context.getID();\n        }\n\n        return FBFakeData.context.id;\n    },\n\n    getPlayerID()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.player.getID();\n        }\n\n        return FBFakeData.player.id;\n    },\n\n    getPlayerName()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.player.getName();\n        }\n\n        return FBFakeData.player.name;\n    },\n\n    getPlayerPhoto()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.player.getPhoto();\n        }\n\n        return FBFakeData.player.photo;\n    },\n\n    logEventTracking(eventName, valueToSum, param)\n    {\n        if (typeof FBInstant === 'undefined') {\n            return;\n        }\n        return FBInstant.logEvent(eventName,\n                valueToSum, \n                param);\n    }\n\n});\n\nmodule.exports = new FBInstantHelper();","var GSMgr = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        APIKey: cc.String,\n        Secret: cc.String,\n    },\n    \n    statics:\n    {\n        instance: null,\n    },\n\n    ctor: function () {\n        \n    },\n    \n    onLoad()\n    {\n        GSMgr.instance = this;\n        cc.game.addPersistRootNode(this.node);\n        this.RTMessagesListeners = {};\n    },\n\n    Init (callback) {\n        this.Inited = false;\n        this.GameSparks = new GameSparks();\n        this.callbackInit = callback;\n\n\t\tthis.GameSparks.initPreview({\n\t\t\tkey: this.APIKey, \n\t\t\tsecret: this.Secret,\n\t\t\tcredential: \"\",\n\t\t\tonNonce: this.onNonce.bind(this),\n\t\t\tonInit: this.onInit.bind(this),\n\t\t\tonMessage: this.onMessage.bind(this),\n\t\t\tlogger: console.log,\n        });\n        this.initRTSession();\n    },\n        \n    onNonce(nonce)\n    {\n        return CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(nonce, this.Secret));\n    },\n    \n    onInit()\n    {\n        this.Inited = true;\n        this.callbackInit();\n    },\n    \n    onMessage(message)\n    {\n        switch (message[\"@class\"]) {\n            case \".MatchFoundMessage\":\n                GameMgr.instance.OnMatchFound(message);\n                var accessToken = message[\"accessToken\"];\n\t\t\t    var host = message[\"host\"];\n\t\t\t    var port = message[\"port\"];\n    \t\t\tthis.myRTSession.stop();\n                if (this.myTimer) {\n                    clearTimeout(this.myTimer);\n                }\n\t\t\t    this.myTimer = setInterval(this.mainRTLoop.bind(this), 10);\n\t\t\t    this.myRTSession.start(accessToken, host, port);\n                break;\n\n            case \".MatchUpdatedMessage\":\n                GameMgr.instance.OnMatchUpdate(message);\n                break;\n        }\n    },\n\n    registrationRequest(displayName, username, password, photo, onResponse)\n    {\n        var request = {};\n            request[\"displayName\"] = displayName;\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n            request[\"scriptData\"] = {\n                \"InstantID\":username,\n                \"Photo\":photo\n            }\n        this.GameSparks.sendWithData(\"RegistrationRequest\", request, onResponse);\n    },\n\n    authenticationRequest(username, password, onResponse)\n    {\n        var request = {};\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n        \n        this.GameSparks.sendWithData(\"AuthenticationRequest\", request, onResponse);\n    },\n\n    enterRoomRequest(gameType, groupName, onResponse)\n    {\n        var request = {};\n            request[\"matchShortCode\"] = gameType;\n            request[\"matchGroup\"] = groupName;\n            request[\"skill\"] = 0;\n        \n        this.GameSparks.sendWithData(\"MatchmakingRequest\", request, onResponse);\n    },\n\n    createChallengeRequest(shortCode, minPlayers, maxPlayers, onResponse)\n    {\n        var request = {};\n            request[\"challengeShortCode\"] = shortCode;\n            request[\"maxPlayers\"] = maxPlayers;\n            request[\"minPlayers\"] = minPlayers;\n            request[\"accessType\"] = \"PUBLIC\";\n            request[\"endTime\"] = \"2030-07-24T00:53Z\";\n\n        this.GameSparks.sendWithData(\"CreateChallengeRequest\", request, onResponse);\n    },\n\n    initRTSession() {\n        this.myTimer = null;\n        this.numCycles = 0;\n        this.myRTSession = {\n            started: false,\n            onPlayerConnect: this.onPlayerConnected.bind(this),\n            onPlayerDisconnect: this.onPlayerDisconnected.bind(this),\n            onReady: this.onSessionReady.bind(this),\n            onPacket: this.onPacketReceived.bind(this),\n            session: null,\n            start: this.startRTSession.bind(this),\n            stop: this.stopRTSession.bind(this),\n            log: this.log.bind(this)\n        }\n    },\n\n    onPlayerConnected(res) {\n        console.log(\"onPlayerConnectedCB\", res);\n    },\n\n    onPlayerDisconnected(res) {\n        console.log(\"onPlayerDisconnected\", res);\n    },\n\n    onSessionReady(res) {\n        cc.log(\"onSessionReady\", res);\n    },\n\n    onPacketReceived(res) {\n        this.triggerCallback(res.opCode, res.data);\n    },\n\n    startRTSession(connectToken, host, port) {\n        var index = host.indexOf(\":\");\n        var theHost;\n\n        if (index > 0) {\n            theHost = host.slice(0, index);\n        } else {\n            theHost = host;\n        }\n\n        console.log(theHost + \" : \" + port);\n\n        this.myRTSession.session = GameSparksRT.getSession(connectToken, theHost, port, this.myRTSession);\n        if (this.myRTSession.session != null) {\n            this.myRTSession.started = true;\n\n            this.myRTSession.session.start();\n        } else {\n            this.myRTSession.started = false;\n        }\n    },\n\n    stopRTSession() {\n        this.myRTSession.started = false;\n\n        if (this.myRTSession.session != null) {\n            this.myRTSession.session.stop();\n        }\n    },\n\n    log(message) {\n        let peers = \"|\";\n\n        for (var index in this.myRTSession.session.activePeers) {\n            peers = peers + this.myRTSession.session.activePeers[index] + \"|\";\n        }\n\n        console.log(this.myRTSession.session.peerId + \": \" + message + \" peers:\" + peers);\n    },\n\n    mainRTLoop()\n    {\n        if (this.myRTSession.started) {\n\t\t\tthis.myRTSession.session.update();\n\n\t\t\tvar data = RTData.get();\n\n\t\t\tdata.setLong(1, this.numCycles);\n\n            this.myRTSession.session.sendRTData(1, GameSparksRT.deliveryIntent.RELIABLE, data, []);\n\n\t\t\tthis.numCycles ++;\n\t\t}\n    },\n\n    registerOpCodeCallback(opCode, callback) {\n        if (!this.RTMessagesListeners[opCode]) {\n            this.RTMessagesListeners[opCode] = [];\n        }\n        this.RTMessagesListeners[opCode].push(callback);\n    },\n\n    triggerCallback(opCode, data) {\n        let listeners = this.RTMessagesListeners[opCode];\n        if (listeners) {\n            for (let i in listeners) {\n                listeners[i](data);\n            }\n        }\n    },\n\n    sendRTData(code, data)\n    {\n        this.myRTSession.session.sendRTData(code, GameSparksRT.deliveryIntent.RELIABLE, data, [0]);\n    },\n\n    //game\n    requestSeat(seat)\n    {\n        let data = RTData.get();\n            data.setLong(1, seat);\n\n        this.sendRTData(ServerCode.RQ_ENTER_SEAT, data);\n    }\n});","var GameMgr = cc.Class({\n    extends: cc.Component,\n\n    statics: {\n        instance: null\n    },\n\n    onLoad()\n    {\n        GameMgr.instance = this;\n        cc.game.addPersistRootNode(this.node);\n        this.matchData={};\n    },\n\n    start()\n    {\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_ENTER_SEAT, this.onPlayerEnterSeat.bind(this));\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_LEAVE_SEAT, this.onPlayerLeaveSeat.bind(this));\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_LOAD_MATCH, this.onMatchLoad.bind(this));\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_HOST_CHANGE, this.onHostChange.bind(this));\n    },\n\n    onInit()\n    {\n        this.startGameScene = true;\n    },\n\n    OnMatchFound(message)\n    {\n        console.log(\"Game on match found \" + JSON.stringify(message));\n        this.onlineList = message.participants;\n    },\n\n    OnMatchUpdate(message)\n    {\n        console.log(\"Game on match update \" + JSON.stringify(message));\n        this.onlineList = message.participants;\n        if (message.hasOwnProperty(\"addedPlayers\"))\n        {\n            let player = this.onlineList.filter(player => player.id == message.addedPlayers)[0];\n                UIManager.instance.addPlayer(player);\n        }\n        if (message.hasOwnProperty(\"removedPlayers\"))\n        {\n            let player = message.removedPlayers[0];\n                UIManager.instance.removePlayer(player);\n        }\n    },\n\n    onMatchLoaded(callback)\n    {\n        this.onMatchLoadedCb = callback;\n    },\n\n    onMatchLoad(message)\n    {\n        this.matchData = JSON.parse(message.getString(1));\n        if (this.onMatchLoadedCb)\n            this.onMatchLoadedCb();\n    },\n\n    getCurrentSeats()\n    {\n        if (this.matchData)\n            return this.matchData.Seats;\n        return {};\n    },\n\n    getPlayer(id)\n    {\n        return this.onlineList.filter(player => player.id == id)[0];\n    },\n\n    getOnlineList()\n    {\n        return this.onlineList;\n    },\n\n    getHost()\n    {\n        return this.matchData.Host;\n    },\n\n    onPlayerEnterSeat(message)\n    {\n        let playerId = message.getString(1);\n        let seat = message.getLong(2);\n            this.matchData.Seats[seat] = playerId;\n            UIManager.instance.playerEnterSeat(this.getPlayer(playerId), seat);\n    },\n\n    onPlayerLeaveSeat(message)\n    {\n        let playerId = message.getString(1);\n        let seat = message.getLong(2);\n            this.matchData.Seats[seat] = null;\n            UIManager.instance.playerLeaveSeat(seat);\n    },\n\n    onHostChange(message)\n    {\n        let playerId = message.getString(1);\n            this.matchData.Host = playerId;\n            UIManager.instance.setHost(playerId);\n    }\n});","window.FBInstantHelper = require(\"FBInstantHelper\");\nwindow.Config = require(\"Config\");\nwindow.GSMgr = new require(\"GSMgr\");\nwindow.GameMgr = new require(\"GameMgr\");\nwindow.UIManager = new require(\"UIManager\");\nwindow.ServerCode = require(\"ServerCode\");\nwindow.ImageCache = require(\"ImageCache\");","var ImageCache = cc.Class({\n\n    ctor() {\n        this.cachedImages = {};\n    },\n\n    Init(callback)\n    {\n        this.addRes(\"default\", \"Texture/default\");\n        callback();\n    },\n\n    addRes(id, path) {\n        if (!this.cachedImages[id]) {\n            this.cachedImages[id] = path;\n            cc.loader.loadRes(path, ((err, img) => {\n                if (err) { cc.error(err); return; }\n                this.cachedImages[id] = img;\n            }).bind(this));\n        }\n    },\n\n    load(id, URL) {\n        if (!this.cachedImages[id]) {\n            this.cachedImages[id] = URL;\n            cc.loader.load(URL, ((err, img) => {\n                if (err) { cc.error(err); return; }\n                this.cachedImages[id] = img;\n            }).bind(this));\n        }\n    },\n\n    addImage(id, img)\n    {\n        if (!this.cachedImages[id])\n            this.cachedImages[id] = img;\n        else\n        {\n            console.warn(\"image with id \" + id + \" is already in cached list\");\n        }\n    },\n\n    getImage(id) {\n        if (!this.cachedImages[id]) {\n            console.error(\"Image id: \" + id + \" was not added to cached list\");\n            id = \"default\";\n        }\n        return this.cachedImages[id];\n    },\n\n    loadAvatar(userId, photo, callback)\n    {\n        if (photo == \"default\")\n        {\n            callback(new cc.SpriteFrame(this.cachedImages[photo]));\n        }\n        else if (this.cachedImages[userId])\n        {\n            callback(new cc.SpriteFrame(this.cachedImages[userId]));\n        }\n        else\n        {\n            cc.loader.load(photo, ((err, img) => {\n                if (err)\n                {\n                    callback(null);\n                }\n                this.cachedImages[userId] = img;\n                callback(new cc.SpriteFrame(this.cachedImages[userId]));\n            }).bind(this));\n        }\n    },\n\n    getSprite(id) {\n        return new cc.SpriteFrame(this.getImage(id));\n    },\n});\n\nmodule.exports = new ImageCache();","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        loadingTimeout: 20,\n    },\n    \n    start()\n    {\n        this.timeout = 0;\n    },\n\n    show()\n    {\n        this.node.active = true;\n        this.timeout = this.loadingTimeout;\n    },\n    \n    hide()\n    {\n        this.timeout = 0;\n        this.node.active = false;\n    },\n    \n    update(dt)\n    {\n        if (this.timeout > 0)\n        {\n            this.timeout -= dt;\n        }\n        else\n        {\n            this.hide();\n        }\n    }\n});\n","\nvar MenuScene = require(\"MenuScene\");\n\ncc.Class({\n    extends: MenuScene,\n\n    properties: {\n        onlineList: require(\"OnlineList\"),\n        SeatMgr: require(\"SeatMgr\")\n    },\n\n    addPlayer(player)\n    {\n        this.onlineList.addPlayer(player);\n    },\n\n    removePlayer(player)\n    {\n        this.onlineList.removePlayer(player);\n    },\n\n    requestSeat(sender, seat)\n    {\n        console.log(\"request Seat\");\n        GSMgr.instance.requestSeat(parseInt(seat));\n    },\n\n    playerEnterSeat(playerInfo, seat)\n    {\n        this.SeatMgr.onPlayerEnter(playerInfo, seat);\n    },\n\n    playerLeaveSeat(seat)\n    {\n        this.SeatMgr.onPlayerLeave(seat);\n    },\n\n    setHost(playerId)\n    {\n        this.SeatMgr.setHost(playerId);\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n    },\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        listNode: cc.Node,\n        onlinePlayer: cc.Prefab\n    },\n\n    start()\n    {\n        this.Init();\n    },\n\n    Init()\n    {\n        let list = GameMgr.instance.getOnlineList();\n        list.forEach(it => {\n            this.addPlayer(it);\n        });\n    },\n\n    addPlayer(player)\n    {\n        let playerNode = cc.instantiate(this.onlinePlayer);\n            playerNode.getComponent(\"OnlinePlayer\").display(player.id, player.scriptData.Photo, player.displayName, ()=>{\n                playerNode.parent = this.listNode;\n                playerNode.name = player.id;\n            });\n    },\n\n    removePlayer(player)\n    {\n        let playerNode = this.listNode.getChildByName(player);\n        if (playerNode)\n        {\n            playerNode.destroy();\n        }\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        avatar: cc.Sprite,\n        displayName: cc.Label\n    },\n\n    display(userId, photo, name, callback)\n    {\n        this.userId = userId;\n        this.displayName.string = name;\n        if (photo != \"default\")\n        {\n            ImageCache.loadAvatar(userId, photo, (imgSprite)=>{\n                if (imgSprite)\n                {\n                    this.avatar.spriteFrame = imgSprite;\n                }\n                else\n                {\n                    console.log(\"Error while loading user avatar \" + userId);\n                }\n                callback();\n            });\n        }\n        else\n        {\n            callback();\n        }\n    },\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        displayNode: cc.Node,\n        avatar: cc.Sprite,\n        userName: cc.Label,\n        money: cc.Label,\n        hostIcon: cc.Node,\n    },\n\n    onLoad()\n    {\n        this.displayNode.active = false;\n        this.hostIcon.active = false;\n    },\n\n    display(playerInfo)\n    {\n        this.playerId = playerInfo.id;\n        let photo = playerInfo.scriptData.Photo;\n        let displayName = playerInfo.displayName;\n\n        ImageCache.loadAvatar(this.playerId, photo, (imgSprite)=>{\n            if (imgSprite)\n            {\n                this.avatar.spriteFrame = imgSprite;\n            }\n            else\n            {\n                console.log(\"Error while loading user avatar \" + this.playerId);\n            }\n            this.userName.string = displayName;\n            this.displayNode.active = true;\n        });\n    },\n\n    getPlayerId()\n    {\n        return this.playerId;\n    },\n\n    remove()\n    {\n        this.playerId = null;\n        this.hostIcon.active = false;\n        this.displayNode.active = false;\n    },\n\n    setHost(isHost)\n    {\n        this.hostIcon.active = isHost;\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    \n    start()\n    {\n        let seats = GameMgr.instance.getCurrentSeats();\n        for (var seat in seats)\n        {\n            let playerId = seats[seat];\n            if (playerId)\n            {\n                let playerInfo = GameMgr.instance.getPlayer(playerId);\n                this.onPlayerEnter(playerInfo, seat);\n            }\n        }\n        let host = GameMgr.instance.getHost();\n        if (host)\n            this.setHost(host);\n    },\n\n    onPlayerEnter(playerInfo, seat)\n    {\n        if (seat < this.node.children.length)\n        {\n            var seatDisplay = this.node.children[seat].getComponent(\"SeatDisplay\");\n                seatDisplay.display(playerInfo);\n        }\n    },\n\n    onPlayerLeave(seat)\n    {\n        if (seat < this.node.children.length)\n        {\n            var seatDisplay = this.node.children[seat].getComponent(\"SeatDisplay\");\n                seatDisplay.remove();\n        }\n    },\n\n    setHost(playerId)\n    {\n        for (var i=0; i<this.node.children.length; i++)\n        {\n            var seatDisplay = this.node.children[i].getComponent(\"SeatDisplay\");\n            if (seatDisplay && seatDisplay.getPlayerId() == playerId)\n            {\n                seatDisplay.setHost(true);\n            }\n            else\n            {\n                seatDisplay && seatDisplay.setHost(false);\n            }\n        }\n    }\n});\n","var ServerCode = {\n    //request\n    RQ_LOAD_MATCH:  999,\n    RQ_ENTER_SEAT: 1000,\n    RQ_LEAVE_SEAT: 1001,\n\n    //response\n    RP_LOAD_MATCH: 1999,\n    RP_ENTER_SEAT: 2000,\n    RP_LEAVE_SEAT: 2001,\n    RP_HOST_CHANGE: 2100,\n\n    //error handle\n    RP_REQUEST_ERROR: 5000,\n    ERROR_DUPLICATED_SEAT: 5001\n}\n\nmodule.exports = ServerCode;","var Loading = require(\"Loading\");\nvar UIManager = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        loadingscreen: Loading,\n        MenuGame: require(\"MenuGame\"),\n    },\n    \n    statics:\n    {\n        instance: null,\n    },\n    \n    onLoad()\n    {\n        UIManager.instance = this;\n        this.MenuStack = [];\n        this.CurrentMenu = null;\n    },\n\n    start()\n    {\n        GameMgr.instance.onInit();\n    },\n\n    showLoading(display)\n    {\n        if (display)\n            this.loadingscreen.show();\n        else\n            this.loadingscreen.hide();\n    },\n    \n    showMenu(menuName, closeCurrent=true)\n    {\n        let menu = this.node.getChildByName(menuName);\n        if (menu != null)\n        {\n            menu.active = true;\n            this.MenuStack.push(menuName);\n            this.CurrentMenu = menuName;\n        }\n        \n        if (this.MenuStack.length > 1)\n        {\n            let lastMenu = this.node.getChildByName(this.MenuStack[this.MenuStack.length - 2]);\n                lastMenu.active = false;\n\n            if (closeCurrent)\n                this.MenuStack.splice(this.MenuStack.length - 2,1);\n        }\n        return menu;\n    },\n    \n    closeCurrentMenu()\n    {\n        if (this.MenuStack.length > 1)\n        {\n            let nextMenu = this.node.getChildByName(this.MenuStack[this.MenuStack.length-2]);\n                nextMenu.active = true;\n        }\n        \n        let menu = this.node.getChildByName(this.CurrentMenu);\n            menu.active = false;\n        \n        this.MenuStack.splice(this.MenuStack.length-1, 1);\n        this.CurrentMenu = this.MenuStack[this.MenuStack.length];\n    },\n\n    closeAllMenu()\n    {\n        let childs = this.node.children;\n            childs.forEach(element => {\n                element.active = false;\n            });\n    },\n\n    initOnlineList()\n    {\n        this.onlineList.Init();\n    },\n\n    addPlayer(player)\n    {\n        this.MenuGame.addPlayer(player);\n    },\n\n    removePlayer(player)\n    {\n        console.log(player);\n        this.MenuGame.removePlayer(player);\n    },\n    \n    playerEnterSeat(playerInfo, seat)\n    {\n        this.MenuGame.playerEnterSeat(playerInfo, seat);\n    },\n\n    playerLeaveSeat(seat)\n    {\n        this.MenuGame.playerLeaveSeat(seat);\n    },\n\n    setHost(playerId)\n    {\n        this.MenuGame.setHost(playerId);\n    }\n});\n"],"sourceRoot":"/source/","file":"project.dev.js"}