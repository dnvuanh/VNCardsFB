{"version":3,"sources":["assets/Script/Boot.js","assets/Script/Config.js","assets/Script/FBInstantHelper.js","assets/Script/Manager/GSMgr.js","assets/Script/GameMgr.js","assets/Script/Global.js","assets/Script/Loading.js","assets/Script/MenuGame.js","assets/Script/MenuScene.js","assets/Script/OnlineList.js","assets/Script/OnlinePlayer.js","assets/Script/ServerCode.js","assets/Script/Manager/UIManager.js"],"names":["cc","Class","extends","Component","properties","loadingBar","ProgressBar","start","this","startLoading","InitGameSpark","GSMgr","instance","Init","LoginServer","bind","progress","userId","FBInstantHelper","getPlayerID","authenticationRequest","OnTryLogin","response","error","playerName","getPlayerName","playerPhoto","getPlayerPhoto","registrationRequest","OnTryRegister","EnterRoom","groupId","getContextID","enterRoomRequest","onEnterRoomResponse","console","log","LoadGameScene","director","preloadScene","Finished","loadScene","Config","API_Key","API_Secret","module","exports","FBFakeData","context","id","player","name","photo","isReady","FBInstant","onPause","callback","onQuitGame","quit","onShareGame","shareAsync","intent","image","getImgBase64","text","data","myReplayData","then","getID","getName","getPhoto","logEventTracking","eventName","valueToSum","param","logEvent","APIKey","String","Secret","statics","ctor","onLoad","game","addPersistRootNode","node","Inited","GameSparks","callbackInit","initPreview","key","secret","credential","onNonce","onInit","onMessage","logger","initRTSession","nonce","CryptoJS","enc","Base64","stringify","HmacSHA256","message","GameMgr","OnMatchFound","accessToken","host","port","myRTSession","stop","myTimer","clearTimeout","setInterval","mainRTLoop","startRTSession","OnMatchUpdate","displayName","username","password","onResponse","request","InstantID","Photo","sendWithData","gameType","groupName","createChallengeRequest","shortCode","minPlayers","maxPlayers","numCycles","started","onPlayerConnect","onPlayerConnected","onPlayerDisconnect","onPlayerDisconnected","onReady","onSessionReady","onPacket","onPacketReceived","session","stopRTSession","res","connectToken","index","indexOf","theHost","slice","GameSparksRT","getSession","peers","activePeers","peerId","update","RTData","get","setLong","sendRTData","deliveryIntent","RELIABLE","code","requestSeat","seat","ServerCode","RQ_ENTER_SEAT","JSON","onlineList","participants","filter","online","hasOwnProperty","addedPlayers","UIManager","addPlayer","_player","removedPlayers","removePlayer","getOnlineList","window","require","loadingTimeout","timeout","show","active","hide","dt","MenuScene","sender","parseInt","listNode","Node","onlinePlayer","Prefab","_this","list","forEach","it","playerNode","instantiate","getComponent","display","scriptData","parent","getChildByName","destroy","avatar","Sprite","Label","loader","load","err","img","spriteFrame","SpriteFrame","string","RP_ENTER_SEAT","Loading","loadingscreen","MenuGame","MenuStack","CurrentMenu","showLoading","showMenu","menuName","closeCurrent","arguments","length","undefined","menu","push","lastMenu","splice","closeCurrentMenu","nextMenu","closeAllMenu","childs","children","element","initOnlineList","enterRoom","roomName"],"mappings":"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","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        loadingBar: cc.ProgressBar,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        this.startLoading();\n    },\n\n    startLoading()\n    {\n        this.InitGameSpark();\n    },\n\n    InitGameSpark()\n    {\n        GSMgr.instance.Init(this.LoginServer.bind(this));\n        this.loadingBar.progress = 0.6;\n    },\n\n    LoginServer()\n    {\n        this.userId = FBInstantHelper.getPlayerID();\n        GSMgr.instance.authenticationRequest(this.userId, this.userId, this.OnTryLogin.bind(this));\n    },\n\n    OnTryLogin(response)\n    {\n        if (response.error)\n        {\n            let playerName = FBInstantHelper.getPlayerName();\n            let playerPhoto = FBInstantHelper.getPlayerPhoto();\n            GSMgr.instance.registrationRequest(playerName, this.userId, this.userId, playerPhoto, this.OnTryRegister.bind(this));\n        }\n        else\n        {\n            this.EnterRoom();\n        }\n    },\n\n    OnTryRegister(response)\n    {\n        if (!response.error)\n        {\n            this.EnterRoom();\n        }\n        else\n        {\n            //pop up error\n        }\n    },\n\n    EnterRoom()\n    {\n        var groupId = FBInstantHelper.getContextID();\n        GSMgr.instance.enterRoomRequest(\"Kill_13\", groupId, this.onEnterRoomResponse.bind(this));\n    },\n\n    onEnterRoomResponse(response)\n    {\n        console.log(response);\n        if (!response.error)\n        {\n            this.LoadGameScene();\n        }\n    },\n\n    LoadGameScene()\n    {\n        cc.director.preloadScene(\"Game\", this.Finished);\n        this.loadingBar.progress = 1;\n    },\n\n    Finished()\n    {\n        cc.director.loadScene(\"Game\");\n    }\n});\n","var Config = {\n    API_Key : \"j356603E53FA\",\n    API_Secret : \"SCWcCimJ27E9MWBwAXn2kJ9lKes90KiC\"\n}\n\nmodule.exports = Config;","var FBFakeData = {\n    \"context\":{\n        \"id\":\"1594416347337301\",\n    },\n    \"player\":{\n        \"name\":\"Mayb\",\n        \"id\":\"TestUser02\",\n        \"photo\":\"default\"\n    }\n};\n\nvar FBInstantHelper = cc.Class({\n\n    isReady () {\n        return typeof FBInstant !== 'undefined';\n    },\n\n    onPause(callback)\n    {\n        if (this.isReady())\n        {\n            FBInstant.onPause(callback);\n        }\n    },\n\n    onQuitGame () {\n        if (typeof FBInstant === 'undefined') return;\n            FBInstant.quit();\n    },\n\n    onShareGame () {\n        if (typeof FBInstant === 'undefined') return;\n        FBInstant.shareAsync({\n            intent: 'SHARE',\n            image: this.getImgBase64(),\n            text: 'X is asking for your help!',\n            data: {myReplayData: '...'},\n        }).then(() => {\n            // continue with the game.\n        });\n    },\n\n    getContextID()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.context.getID();\n        }\n\n        return FBFakeData.context.id;\n    },\n\n    getPlayerID()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.player.getID();\n        }\n\n        return FBFakeData.player.id;\n    },\n\n    getPlayerName()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.player.getName();\n        }\n\n        return FBFakeData.player.name;\n    },\n\n    getPlayerPhoto()\n    {\n        if (typeof FBInstant !== 'undefined') {\n            return FBInstant.player.getPhoto();\n        }\n\n        return FBFakeData.player.photo;\n    },\n\n    logEventTracking(eventName, valueToSum, param)\n    {\n        if (typeof FBInstant === 'undefined') {\n            return;\n        }\n        return FBInstant.logEvent(eventName,\n                valueToSum, \n                param);\n    }\n\n});\n\nmodule.exports = new FBInstantHelper();","var GSMgr = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        APIKey: cc.String,\n        Secret: cc.String,\n    },\n    \n    statics:\n    {\n        instance: null,\n    },\n\n    ctor: function () {\n        \n    },\n    \n    onLoad()\n    {\n        GSMgr.instance = this;\n        cc.game.addPersistRootNode(this.node);\n    },\n\n    Init (callback) {\n        this.Inited = false;\n        this.GameSparks = new GameSparks();\n        this.callbackInit = callback;\n\n\t\tthis.GameSparks.initPreview({\n\t\t\tkey: this.APIKey, \n\t\t\tsecret: this.Secret,\n\t\t\tcredential: \"\",\n\t\t\tonNonce: this.onNonce.bind(this),\n\t\t\tonInit: this.onInit.bind(this),\n\t\t\tonMessage: this.onMessage.bind(this),\n\t\t\tlogger: console.log,\n        });\n        this.initRTSession();\n    },\n        \n    onNonce(nonce)\n    {\n        return CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(nonce, this.Secret));\n    },\n    \n    onInit()\n    {\n        this.Inited = true;\n        this.callbackInit();\n    },\n    \n    onMessage(message)\n    {\n        switch (message[\"@class\"]) {\n            case \".MatchFoundMessage\":\n                GameMgr.instance.OnMatchFound(message);\n                var accessToken = message[\"accessToken\"];\n\t\t\t    var host = message[\"host\"];\n\t\t\t    var port = message[\"port\"];\n    \t\t\tthis.myRTSession.stop();\n                if (this.myTimer) {\n                    clearTimeout(this.myTimer);\n                }\n\t\t\t    this.myTimer = setInterval(this.mainRTLoop.bind(this), 10);\n\t\t\t    this.startRTSession(accessToken, host, port);\n                break;\n\n            case \".MatchUpdatedMessage\":\n                GameMgr.instance.OnMatchUpdate(message);\n                break;\n        }\n    },\n\n    registrationRequest(displayName, username, password, photo, onResponse)\n    {\n        var request = {};\n            request[\"displayName\"] = displayName;\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n            request[\"scriptData\"] = {\n                \"InstantID\":username,\n                \"Photo\":photo\n            }\n        this.GameSparks.sendWithData(\"RegistrationRequest\", request, onResponse);\n    },\n\n    authenticationRequest(username, password, onResponse)\n    {\n        var request = {};\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n        \n        this.GameSparks.sendWithData(\"AuthenticationRequest\", request, onResponse);\n    },\n\n    enterRoomRequest(gameType, groupName, onResponse)\n    {\n        var request = {};\n            request[\"matchShortCode\"] = gameType;\n            request[\"matchGroup\"] = groupName;\n            request[\"skill\"] = 0;\n        \n        this.GameSparks.sendWithData(\"MatchmakingRequest\", request, onResponse);\n    },\n\n    createChallengeRequest(shortCode, minPlayers, maxPlayers, onResponse)\n    {\n        var request = {};\n            request[\"challengeShortCode\"] = shortCode;\n            request[\"maxPlayers\"] = maxPlayers;\n            request[\"minPlayers\"] = minPlayers;\n            request[\"accessType\"] = \"PUBLIC\";\n            request[\"endTime\"] = \"2030-07-24T00:53Z\";\n\n        this.GameSparks.sendWithData(\"CreateChallengeRequest\", request, onResponse);\n    },\n\n    initRTSession() {\n        this.myTimer = null;\n        this.numCycles = 0;\n        this.myRTSession = {\n            started: false,\n            onPlayerConnect: this.onPlayerConnected.bind(this),\n            onPlayerDisconnect: this.onPlayerDisconnected.bind(this),\n            onReady: this.onSessionReady.bind(this),\n            onPacket: this.onPacketReceived.bind(this),\n            session: null,\n            start: this.startRTSession.bind(this),\n            stop: this.stopRTSession.bind(this),\n            log: this.log.bind(this)\n        }\n    },\n\n    onPlayerConnected(res) {\n        console.log(\"onPlayerConnectedCB\", res);\n    },\n\n    onPlayerDisconnected(res) {\n        console.log(\"onPlayerDisconnected\", res);\n    },\n\n    onSessionReady(res) {\n        cc.log(\"onSessionReady\", res);\n    },\n\n    onPacketReceived(res) {\n        cc.log(\"onPacketReceived\", res);\n    },\n\n    startRTSession(connectToken, host, port) {\n        var index = host.indexOf(\":\");\n        var theHost;\n\n        if (index > 0) {\n            theHost = host.slice(0, index);\n        } else {\n            theHost = host;\n        }\n\n        console.log(theHost + \" : \" + port);\n\n        this.myRTSession.session = GameSparksRT.getSession(connectToken, theHost, port, this.myRTSession);\n        if (this.myRTSession.session != null) {\n            this.myRTSession.started = true;\n\n            this.myRTSession.session.start();\n        } else {\n            this.myRTSession.started = false;\n        }\n    },\n\n    stopRTSession() {\n        this.myRTSession.started = false;\n\n        if (this.myRTSession.session != null) {\n            this.myRTSession.session.stop();\n        }\n    },\n\n    log(message) {\n        let peers = \"|\";\n\n        for (var index in this.myRTSession.session.activePeers) {\n            peers = peers + this.myRTSession.session.activePeers[index] + \"|\";\n        }\n\n        console.log(this.myRTSession.session.peerId + \": \" + message + \" peers:\" + peers);\n    },\n\n    mainRTLoop()\n    {\n        if (this.myRTSession.started) {\n\t\t\tthis.myRTSession.session.update();\n\n\t\t\tvar data = RTData.get();\n\n\t\t\tdata.setLong(1, this.numCycles);\n\n\t\t\tthis.myRTSession.session.sendRTData(1, GameSparksRT.deliveryIntent.RELIABLE, data, []);\n\n\t\t\tthis.numCycles ++;\n\t\t}\n    },\n\n    sendRTData(code, data)\n    {\n        this.myRTSession.session.sendRTData(code, GameSparksRT.deliveryIntent.RELIABLE, data, [0]);\n    },\n\n    //game\n    requestSeat(seat)\n    {\n        let data = RTData.get();\n            data.setLong(1, seat);\n\n        this.sendRTData(ServerCode.RQ_ENTER_SEAT, data);\n    }\n});","var GameMgr = cc.Class({\n    extends: cc.Component,\n\n    statics: {\n        instance: null\n    },\n\n    onLoad()\n    {\n        GameMgr.instance = this;\n        cc.game.addPersistRootNode(this.node);\n    },\n\n    OnMatchFound(message)\n    {\n        console.log(\"Game on match found \" + JSON.stringify(message));\n        //this.onlineList = message.participants.filter(player=>player.online);\n        this.onlineList = message.participants;\n    },\n\n    OnMatchUpdate(message)\n    {\n        console.log(\"Game on match update \" + JSON.stringify(message));\n        this.onlineList = message.participants.filter(player=>player.online);\n        if (message.hasOwnProperty(\"addedPlayers\"))\n        {\n            let player = this.onlineList.filter(player => player.id == message.addedPlayers)[0];\n                UIManager.instance.addPlayer(player);\n        }\n        if (message.hasOwnProperty(\"removedPlayers\"))\n        {\n            let player = message.removedPlayers[0];\n                UIManager.instance.removePlayer(player);\n        }\n    },\n\n    getOnlineList()\n    {\n        return this.onlineList;\n    },\n});","window.FBInstantHelper = require(\"FBInstantHelper\");\nwindow.Config = require(\"Config\");\nwindow.GSMgr = new require(\"GSMgr\");\nwindow.GameMgr = new require(\"GameMgr\");\nwindow.UIManager = new require(\"UIManager\");\nwindow.ServerCode = require(\"ServerCode\");","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        loadingTimeout: 20,\n    },\n    \n    start()\n    {\n        this.timeout = 0;\n    },\n\n    show()\n    {\n        this.node.active = true;\n        this.timeout = this.loadingTimeout;\n    },\n    \n    hide()\n    {\n        this.timeout = 0;\n        this.node.active = false;\n    },\n    \n    update(dt)\n    {\n        if (this.timeout > 0)\n        {\n            this.timeout -= dt;\n        }\n        else\n        {\n            this.hide();\n        }\n    }\n});\n","\nvar MenuScene = require(\"MenuScene\");\n\ncc.Class({\n    extends: MenuScene,\n\n    properties: {\n        onlineList: require(\"OnlineList\")\n    },\n\n    addPlayer(player)\n    {\n        this.onlineList.addPlayer(player);\n    },\n\n    removePlayer(player)\n    {\n        this.onlineList.removePlayer(player);\n    },\n\n    requestSeat(sender, seat)\n    {\n        console.log(\"request Seat\");\n        GSMgr.instance.requestSeat(parseInt(seat));\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n    },\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        listNode: cc.Node,\n        onlinePlayer: cc.Prefab\n    },\n\n    start()\n    {\n        this.Init();\n    },\n\n    Init()\n    {\n        let list = GameMgr.instance.getOnlineList();\n        list.forEach(it => {\n            this.addPlayer(it);\n        });\n    },\n\n    addPlayer(player)\n    {\n        let playerNode = cc.instantiate(this.onlinePlayer);\n            playerNode.getComponent(\"OnlinePlayer\").display(player.id, player.scriptData.Photo, player.displayName);\n            playerNode.parent = this.listNode;\n            playerNode.name = player.id;\n    },\n\n    removePlayer(player)\n    {\n        let playerNode = this.listNode.getChildByName(player);\n        if (playerNode)\n        {\n            playerNode.destroy();\n        }\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        avatar: cc.Sprite,\n        displayName: cc.Label\n    },\n\n    display(userId, photo, name)\n    {\n        this.userId = userId;\n        if (photo != \"default\")\n        {\n            cc.loader.load(photo, ((err, img) => {\n                if (err)\n                {\n                    cc.error(err);\n                    return;\n                }\n                this.avatar.spriteFrame = new cc.SpriteFrame(img);\n            }).bind(this));\n        }\n        this.displayName.string = name;\n    },\n});\n","var ServerCode = {\n    //request\n    RQ_ENTER_SEAT: 1000,\n\n    //response\n    RP_ENTER_SEAT: 2000\n}\n\nmodule.exports = ServerCode;","var Loading = require(\"Loading\");\nvar UIManager = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        loadingscreen: Loading,\n        MenuGame: require(\"MenuGame\"),\n    },\n    \n    statics:\n    {\n        instance: null,\n    },\n    \n    onLoad()\n    {\n        UIManager.instance = this;\n        this.MenuStack = [];\n        this.CurrentMenu = null;\n    },\n\n    showLoading(display)\n    {\n        if (display)\n            this.loadingscreen.show();\n        else\n            this.loadingscreen.hide();\n    },\n    \n    showMenu(menuName, closeCurrent=true)\n    {\n        let menu = this.node.getChildByName(menuName);\n        if (menu != null)\n        {\n            menu.active = true;\n            this.MenuStack.push(menuName);\n            this.CurrentMenu = menuName;\n        }\n        \n        if (this.MenuStack.length > 1)\n        {\n            let lastMenu = this.node.getChildByName(this.MenuStack[this.MenuStack.length - 2]);\n                lastMenu.active = false;\n\n            if (closeCurrent)\n                this.MenuStack.splice(this.MenuStack.length - 2,1);\n        }\n        return menu;\n    },\n    \n    closeCurrentMenu()\n    {\n        if (this.MenuStack.length > 1)\n        {\n            let nextMenu = this.node.getChildByName(this.MenuStack[this.MenuStack.length-2]);\n                nextMenu.active = true;\n        }\n        \n        let menu = this.node.getChildByName(this.CurrentMenu);\n            menu.active = false;\n        \n        this.MenuStack.splice(this.MenuStack.length-1, 1);\n        this.CurrentMenu = this.MenuStack[this.MenuStack.length];\n    },\n\n    closeAllMenu()\n    {\n        let childs = this.node.children;\n            childs.forEach(element => {\n                element.active = false;\n            });\n    },\n\n    initOnlineList()\n    {\n        this.onlineList.Init();\n    },\n\n    addPlayer(player)\n    {\n        this.MenuGame.addPlayer(player);\n    },\n\n    removePlayer(player)\n    {\n        console.log(player);\n        this.MenuGame.removePlayer(player);\n    },\n    \n    enterRoom(roomName)\n    {\n        showMenu(\"MenuMatchRoom\");\n    },\n});\n"],"sourceRoot":"/source/","file":"project.dev.js"}