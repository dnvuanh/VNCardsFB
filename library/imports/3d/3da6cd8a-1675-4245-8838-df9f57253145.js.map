{"version":3,"sources":["../../../../../assets/Script/UI/assets/Script/UI/MenuGame.js"],"names":["MenuScene","require","ObjectPool","cc","Class","extends","properties","onlineList","chatBox","SeatMgr","DealCards","ButtonLeave","Node","ButtonStart","ButtonReady","PlayingButtons","myCardNode","friendCardNode","rightPanelNode","showRightButton","Button","showRightLabel","Label","throwButton","skipButton","playZoneNode","start","active","node","seatOccupied","addPlayer","player","removePlayer","requestSeat","sender","seat","console","log","GSMgr","instance","parseInt","requestLeaveSeat","leaveSeat","GameMgr","getMySeat","playerEnterSeat","playerInfo","onPlayerEnter","IsMyId","id","IsHost","playerLeaveSeat","enableStartButton","onPlayerLeave","setHost","playerId","enable","chatBoxClick","onlineClick","onStartGameClick","startGame","children","forEach","it","onCardsReceived","cards","cardCount","startAnim","card","getCard","setParent","previousCards","previousThrowPlayer","onShowRightMenuClick","position","getPosition","string","getSelectedCards","SelectedCards","cardList","getComponentsInChildren","IsSelected","push","throwCards","skipTurn","onTurnChange","startTime","timeout","interactable","beginNewTurn","checkThrowable","GameHelper","validTurn","onThrowSuccess","parseCards","removeCardsFromHand","idx","OFFSET","sort","a","b","getChildByName","x","onGameOver","stopAllTurn","displayResult","scores","CheckPlayerFinished","onPlayerReady","isReady","length","onPlayerFinished","onButtonReadyPressed","requestPlayerReady"],"mappings":"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","file":"MenuGame.js","sourceRoot":"../../../../../assets/Script/UI","sourcesContent":["\r\nvar MenuScene = require(\"MenuScene\");\r\nvar ObjectPool = require(\"ObjectPool\");\r\n\r\ncc.Class({\r\n    extends: MenuScene,\r\n\r\n    properties: {\r\n        onlineList: require(\"OnlineList\"),\r\n        chatBox: require(\"ChatBox\"),\r\n        SeatMgr: require(\"SeatMgr\"),\r\n        DealCards: require(\"DealCards\"),\r\n        ButtonLeave: cc.Node,\r\n        ButtonStart: cc.Node,\r\n        ButtonReady: cc.Node,\r\n        PlayingButtons: cc.Node,\r\n        myCardNode: cc.Node,\r\n        friendCardNode: cc.Node,\r\n        rightPanelNode: cc.Node,\r\n        showRightButton: cc.Button,\r\n        showRightLabel: cc.Label,\r\n        throwButton: cc.Button,\r\n        skipButton: cc.Button,\r\n        playZoneNode: cc.Node,\r\n    },\r\n\r\n    start()\r\n    {\r\n        this.ButtonLeave.active = false;\r\n        this.ButtonStart.active = false;\r\n        this.ButtonReady.active = false;\r\n        this.PlayingButtons.active = false;\r\n        this.onlineList.node.active = true;\r\n        this.chatBox.node.active = false;\r\n        this.seatOccupied = [false, false, false, false];\r\n    },\r\n\r\n    addPlayer(player)\r\n    {\r\n        this.onlineList.addPlayer(player);\r\n    },\r\n\r\n    removePlayer(player)\r\n    {\r\n        this.onlineList.removePlayer(player);\r\n    },\r\n\r\n    requestSeat(sender, seat)\r\n    {\r\n        console.log(\"request Seat\");\r\n        GSMgr.instance.requestSeat(parseInt(seat));\r\n    },\r\n\r\n    requestLeaveSeat()\r\n    {\r\n        GSMgr.instance.leaveSeat(GameMgr.instance.getMySeat());\r\n    },\r\n\r\n    playerEnterSeat(playerInfo, seat)\r\n    {\r\n        this.seatOccupied[seat] = true;\r\n        this.SeatMgr.onPlayerEnter(playerInfo, seat);\r\n        if (GameMgr.instance.IsMyId(playerInfo.id))\r\n        {\r\n            this.ButtonLeave.active = true;\r\n            this.ButtonReady.active = !GameMgr.instance.IsHost(playerInfo.id);\r\n        }\r\n    },\r\n\r\n    playerLeaveSeat(seat)\r\n    {\r\n        if (GameMgr.instance.getMySeat() == seat)\r\n        {\r\n            this.ButtonLeave.active = false;\r\n            this.enableStartButton(false);\r\n        }\r\n        this.SeatMgr.onPlayerLeave(seat);\r\n    },\r\n\r\n    setHost(playerId)\r\n    {\r\n        this.SeatMgr.setHost(playerId);\r\n    },\r\n\r\n    enableStartButton(enable) {\r\n        this.ButtonStart.active = enable;\r\n    },\r\n\r\n    chatBoxClick()\r\n    {\r\n        this.onlineList.node.active = false;\r\n        this.chatBox.node.active = true;\r\n    },\r\n\r\n    onlineClick()\r\n    {\r\n        this.onlineList.node.active = true;\r\n        this.chatBox.node.active = false;\r\n    },\r\n\r\n    onStartGameClick()\r\n    {\r\n        GSMgr.instance.startGame();\r\n        this.ButtonStart.active = false;\r\n        this.friendCardNode.children.forEach(it => it.active = false);\r\n    },\r\n\r\n    onCardsReceived(cards)\r\n    {\r\n        let cardCount = 0;\r\n        this.DealCards.startAnim(()=>{\r\n            let card = ObjectPool.instance.getCard(cards[cardCount]);\r\n                card.setParent(this.myCardNode);\r\n            if (cardCount == 0)\r\n            {\r\n                this.friendCardNode.children.forEach(it => it.active = true);\r\n            }\r\n            cardCount += 1;\r\n        });\r\n        this.PlayingButtons.active = true;\r\n        this.previousCards = null;\r\n        this.previousThrowPlayer = null;\r\n    },\r\n\r\n    onShowRightMenuClick()\r\n    {\r\n        var position = this.showRightButton.node.getPosition();\r\n        if (this.rightPanelNode.active == true) {\r\n            this.rightPanelNode.active = false;\r\n            this.showRightLabel.string = \"<<\";\r\n            return;\r\n        }\r\n        this.rightPanelNode.active = true;\r\n        this.showRightLabel.string = \">>\";\r\n    },\r\n\r\n    getSelectedCards()\r\n    {\r\n        var SelectedCards = [];\r\n        let cardList = this.myCardNode.getComponentsInChildren(\"Card\");\r\n            cardList.forEach(card => {\r\n                if (card.IsSelected())\r\n                SelectedCards.push(card.getCard());\r\n            })\r\n        return SelectedCards;\r\n    },\r\n\r\n    throwCards()\r\n    {\r\n        let cards = this.getSelectedCards();\r\n        GSMgr.instance.throwCards(cards);\r\n    },\r\n\r\n    skipTurn()\r\n    {\r\n        GSMgr.instance.skipTurn();\r\n    },\r\n\r\n    onTurnChange(playerId, startTime, timeout)\r\n    {\r\n        this.SeatMgr.onTurnChange(playerId, startTime, timeout);\r\n        if(GameMgr.instance.IsMyId(playerId))   {\r\n            this.PlayingButtons.active = true;\r\n        } else {\r\n            this.PlayingButtons.active = false;\r\n        }\r\n        this.throwButton.interactable = false;\r\n        this.skipButton.interactable = true;\r\n        if(this.previousThrowPlayer == playerId)\r\n        {\r\n            this.beginNewTurn();\r\n        }\r\n    },\r\n\r\n    beginNewTurn()\r\n    {\r\n        this.previousCards = null;\r\n        this.skipButton.interactable = false;\r\n        let cardList = this.playZoneNode.getComponentsInChildren(\"Card\");\r\n            cardList.forEach(card => {\r\n                card.node.active = false;\r\n            });\r\n    },\r\n\r\n    checkThrowable(enable)\r\n    {\r\n        if(GameHelper.validTurn(this.previousCards, this.getSelectedCards())) {\r\n            this.throwButton.interactable = true;\r\n        }\r\n        else {\r\n            this.throwButton.interactable = false;\r\n        }\r\n    },\r\n\r\n    onThrowSuccess(playerId, cards)\r\n    {\r\n        this.previousCards = GameHelper.parseCards(cards);\r\n        this.removeCardsFromHand(playerId, cards);\r\n        this.previousThrowPlayer = playerId;\r\n    },\r\n\r\n    removeCardsFromHand(playerId, cards)\r\n    {\r\n        let idx = 0;\r\n        const OFFSET = 50;\r\n        cards.sort((a,b) => a - b);\r\n        if(GameMgr.instance.IsMyId(playerId)) {\r\n            cards.forEach(it => {\r\n                let card = this.myCardNode.getChildByName(\"Card_\" + it);\r\n                card.setParent(this.playZoneNode);\r\n                card.x = idx++ * OFFSET;\r\n            });\r\n        } else {\r\n            cards.forEach(it => {\r\n                let card = ObjectPool.instance.getCard(it);\r\n                card.setParent(this.playZoneNode);\r\n                card.x = idx++ * OFFSET;\r\n            });\r\n        }\r\n    },\r\n\r\n    onGameOver()\r\n    {\r\n        this.SeatMgr.stopAllTurn();\r\n    },\r\n\r\n    displayResult(scores)\r\n    {\r\n        console.log(scores);\r\n        this.CheckPlayerFinished(playerId);\r\n    },\r\n\r\n    onPlayerReady(playerId, isReady)\r\n    {\r\n        this.SeatMgr.onPlayerReady(playerId, isReady);\r\n    },\r\n\r\n    CheckPlayerFinished(playerId)\r\n    {\r\n        let cardList = this.myCardNode.getComponentsInChildren(\"Card\");\r\n        if(cardList.length == 0)\r\n        {\r\n            if(GameMgr.instance.IsMyId(playerId)) {\r\n                //TODO: win popup\r\n            }\r\n            this.SeatMgr.onPlayerFinished(playerId);\r\n        }\r\n    },\r\n\r\n    onButtonReadyPressed()\r\n    {\r\n        GSMgr.instance.requestPlayerReady(true);\r\n    }\r\n});\r\n"]}