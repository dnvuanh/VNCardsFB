{"version":3,"sources":["../../../../../assets/Script/UI/assets/Script/UI/MenuGame.js"],"names":["MenuScene","require","ObjectPool","cc","Class","extends","properties","onlineList","chatBox","SeatMgr","DealCards","ButtonLeave","Node","ButtonStart","InGameButtons","myCardNode","friendCardNode","rightPanelNode","showRightButton","Button","showRightLabel","Label","throwButton","playZoneNode","start","active","node","seatOccupied","addPlayer","player","removePlayer","requestSeat","sender","seat","console","log","GSMgr","instance","parseInt","requestLeaveSeat","leaveSeat","GameMgr","getMySeat","playerEnterSeat","playerInfo","onPlayerEnter","IsMyId","id","playerLeaveSeat","enableStartButton","onPlayerLeave","setHost","playerId","enable","chatBoxClick","onlineClick","onStartGameClick","startGame","children","forEach","it","onCardsReceived","cards","cardCount","startAnim","card","getCard","setParent","previousCards","previousThrowPlayer","onShowRightMenuClick","position","getPosition","string","getSelectedCards","SelectedCards","cardList","getComponentsInChildren","IsSelected","push","throwCards","skipTurn","onTurnChange","startTime","timeout","interactable","checkThrowable","GameHelper","validTurn","onThrowSuccess","parseCards","removeCardsFromHand","idx","OFFSET","sort","a","b","getChildByName","x","onGameOver","stopAllTurn","displayResult","scores"],"mappings":";;;;;;AACA,IAAIA,YAAYC,QAAQ,WAAR,CAAhB;AACA,IAAIC,aAAaD,QAAQ,YAAR,CAAjB;;AAEAE,GAAGC,KAAH,CAAS;AACLC,aAASL,SADJ;;AAGLM,gBAAY;AACRC,oBAAYN,QAAQ,YAAR,CADJ;AAERO,iBAASP,QAAQ,SAAR,CAFD;AAGRQ,iBAASR,QAAQ,SAAR,CAHD;AAIRS,mBAAWT,QAAQ,WAAR,CAJH;AAKRU,qBAAaR,GAAGS,IALR;AAMRC,qBAAaV,GAAGS,IANR;AAORE,uBAAeX,GAAGS,IAPV;AAQRG,oBAAYZ,GAAGS,IARP;AASRI,wBAAgBb,GAAGS,IATX;AAURK,wBAAgBd,GAAGS,IAVX;AAWRM,yBAAiBf,GAAGgB,MAXZ;AAYRC,wBAAgBjB,GAAGkB,KAZX;AAaRC,qBAAanB,GAAGgB,MAbR;AAcRI,sBAAcpB,GAAGS;AAdT,KAHP;;AAoBLY,SApBK,mBAqBL;AACI,aAAKb,WAAL,CAAiBc,MAAjB,GAA0B,KAA1B;AACA,aAAKZ,WAAL,CAAiBY,MAAjB,GAA0B,KAA1B;AACA,aAAKX,aAAL,CAAmBW,MAAnB,GAA4B,KAA5B;AACA,aAAKlB,UAAL,CAAgBmB,IAAhB,CAAqBD,MAArB,GAA8B,IAA9B;AACA,aAAKjB,OAAL,CAAakB,IAAb,CAAkBD,MAAlB,GAA2B,KAA3B;AACA,aAAKE,YAAL,GAAoB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAApB;AACH,KA5BI;AA8BLC,aA9BK,qBA8BKC,MA9BL,EA+BL;AACI,aAAKtB,UAAL,CAAgBqB,SAAhB,CAA0BC,MAA1B;AACH,KAjCI;AAmCLC,gBAnCK,wBAmCQD,MAnCR,EAoCL;AACI,aAAKtB,UAAL,CAAgBuB,YAAhB,CAA6BD,MAA7B;AACH,KAtCI;AAwCLE,eAxCK,uBAwCOC,MAxCP,EAwCeC,IAxCf,EAyCL;AACIC,gBAAQC,GAAR,CAAY,cAAZ;AACAC,cAAMC,QAAN,CAAeN,WAAf,CAA2BO,SAASL,IAAT,CAA3B;AACH,KA5CI;AA8CLM,oBA9CK,8BA+CL;AACIH,cAAMC,QAAN,CAAeG,SAAf,CAAyBC,QAAQJ,QAAR,CAAiBK,SAAjB,EAAzB;AACH,KAjDI;AAmDLC,mBAnDK,2BAmDWC,UAnDX,EAmDuBX,IAnDvB,EAoDL;AACI,aAAKN,YAAL,CAAkBM,IAAlB,IAA0B,IAA1B;AACA,aAAKxB,OAAL,CAAaoC,aAAb,CAA2BD,UAA3B,EAAuCX,IAAvC;AACA,YAAIQ,QAAQJ,QAAR,CAAiBS,MAAjB,CAAwBF,WAAWG,EAAnC,CAAJ,EACA;AACI,iBAAKpC,WAAL,CAAiBc,MAAjB,GAA0B,IAA1B;AACH;AACJ,KA3DI;AA6DLuB,mBA7DK,2BA6DWf,IA7DX,EA8DL;AACI,YAAIQ,QAAQJ,QAAR,CAAiBK,SAAjB,MAAgCT,IAApC,EACA;AACI,iBAAKtB,WAAL,CAAiBc,MAAjB,GAA0B,KAA1B;AACA,iBAAKwB,iBAAL,CAAuB,KAAvB;AACH;AACD,aAAKxC,OAAL,CAAayC,aAAb,CAA2BjB,IAA3B;AACH,KArEI;AAuELkB,WAvEK,mBAuEGC,QAvEH,EAwEL;AACI,aAAK3C,OAAL,CAAa0C,OAAb,CAAqBC,QAArB;AACH,KA1EI;AA4ELH,qBA5EK,6BA4EaI,MA5Eb,EA4EqB;AACtB,aAAKxC,WAAL,CAAiBY,MAAjB,GAA0B4B,MAA1B;AACH,KA9EI;AAgFLC,gBAhFK,0BAiFL;AACI,aAAK/C,UAAL,CAAgBmB,IAAhB,CAAqBD,MAArB,GAA8B,KAA9B;AACA,aAAKjB,OAAL,CAAakB,IAAb,CAAkBD,MAAlB,GAA2B,IAA3B;AACH,KApFI;AAsFL8B,eAtFK,yBAuFL;AACI,aAAKhD,UAAL,CAAgBmB,IAAhB,CAAqBD,MAArB,GAA8B,IAA9B;AACA,aAAKjB,OAAL,CAAakB,IAAb,CAAkBD,MAAlB,GAA2B,KAA3B;AACH,KA1FI;AA4FL+B,oBA5FK,8BA6FL;AACIpB,cAAMC,QAAN,CAAeoB,SAAf;AACA,aAAK5C,WAAL,CAAiBY,MAAjB,GAA0B,KAA1B;AACA,aAAKT,cAAL,CAAoB0C,QAApB,CAA6BC,OAA7B,CAAqC;AAAA,mBAAMC,GAAGnC,MAAH,GAAY,KAAlB;AAAA,SAArC;AACH,KAjGI;AAmGLoC,mBAnGK,2BAmGWC,KAnGX,EAoGL;AAAA;;AACI,YAAIC,YAAY,CAAhB;AACA,aAAKrD,SAAL,CAAesD,SAAf,CAAyB,YAAI;AACzB,gBAAIC,OAAO/D,WAAWmC,QAAX,CAAoB6B,OAApB,CAA4BJ,MAAMC,SAAN,CAA5B,CAAX;AACIE,iBAAKE,SAAL,CAAe,MAAKpD,UAApB;AACJ,gBAAIgD,aAAa,CAAjB,EACA;AACI,sBAAK/C,cAAL,CAAoB0C,QAApB,CAA6BC,OAA7B,CAAqC;AAAA,2BAAMC,GAAGnC,MAAH,GAAY,IAAlB;AAAA,iBAArC;AACH;AACDsC,yBAAa,CAAb;AACH,SARD;AASA,aAAKjD,aAAL,CAAmBW,MAAnB,GAA4B,IAA5B;AACA,aAAK2C,aAAL,GAAqB,IAArB;AACA,aAAKC,mBAAL,GAA2B,IAA3B;AACH,KAlHI;AAoHLC,wBApHK,kCAqHL;AACI,YAAIC,WAAW,KAAKrD,eAAL,CAAqBQ,IAArB,CAA0B8C,WAA1B,EAAf;AACA,YAAI,KAAKvD,cAAL,CAAoBQ,MAApB,IAA8B,IAAlC,EAAwC;AACpC,iBAAKR,cAAL,CAAoBQ,MAApB,GAA6B,KAA7B;AACA,iBAAKL,cAAL,CAAoBqD,MAApB,GAA6B,IAA7B;AACA;AACH;AACD,aAAKxD,cAAL,CAAoBQ,MAApB,GAA6B,IAA7B;AACA,aAAKL,cAAL,CAAoBqD,MAApB,GAA6B,IAA7B;AACH,KA9HI;AAgILC,oBAhIK,8BAiIL;AACI,YAAIC,gBAAgB,EAApB;AACA,YAAIC,WAAW,KAAK7D,UAAL,CAAgB8D,uBAAhB,CAAwC,MAAxC,CAAf;AACID,iBAASjB,OAAT,CAAiB,gBAAQ;AACrB,gBAAIM,KAAKa,UAAL,EAAJ,EACAH,cAAcI,IAAd,CAAmBd,KAAKC,OAAL,EAAnB;AACH,SAHD;AAIJ,eAAOS,aAAP;AACH,KAzII;AA2ILK,cA3IK,wBA4IL;AACI,YAAIlB,QAAQ,KAAKY,gBAAL,EAAZ;AACAtC,cAAMC,QAAN,CAAe2C,UAAf,CAA0BlB,KAA1B;AACH,KA/II;AAiJLmB,YAjJK,sBAkJL;AACI7C,cAAMC,QAAN,CAAe4C,QAAf;AACH,KApJI;AAsJLC,gBAtJK,wBAsJQ9B,QAtJR,EAsJkB+B,SAtJlB,EAsJ6BC,OAtJ7B,EAuJL;AACI,aAAK3E,OAAL,CAAayE,YAAb,CAA0B9B,QAA1B,EAAoC+B,SAApC,EAA+CC,OAA/C;AACA,YAAG3C,QAAQJ,QAAR,CAAiBS,MAAjB,CAAwBM,QAAxB,CAAH,EAAwC;AACpC,iBAAKtC,aAAL,CAAmBW,MAAnB,GAA4B,IAA5B;AACH,SAFD,MAEO;AACH,iBAAKX,aAAL,CAAmBW,MAAnB,GAA4B,KAA5B;AACH;AACD,aAAKH,WAAL,CAAiB+D,YAAjB,GAAgC,KAAhC;AACA,YAAG,KAAKhB,mBAAL,IAA4BjB,QAA/B,EACA;AACI,iBAAKgB,aAAL,GAAqB,IAArB;AACH;AACJ,KAnKI;AAqKLkB,kBArKK,0BAqKUjC,MArKV,EAsKL;AACI,YAAGkC,WAAWC,SAAX,CAAqB,KAAKpB,aAA1B,EAAyC,KAAKM,gBAAL,EAAzC,CAAH,EAAsE;AAClE,iBAAKpD,WAAL,CAAiB+D,YAAjB,GAAgC,IAAhC;AACH,SAFD,MAGK;AACD,iBAAK/D,WAAL,CAAiB+D,YAAjB,GAAgC,KAAhC;AACH;AACJ,KA7KI;AA+KLI,kBA/KK,0BA+KUrC,QA/KV,EA+KoBU,KA/KpB,EAgLL;AACI,aAAKM,aAAL,GAAqBmB,WAAWG,UAAX,CAAsB5B,KAAtB,CAArB;AACA,aAAK6B,mBAAL,CAAyBvC,QAAzB,EAAmCU,KAAnC;AACA,aAAKO,mBAAL,GAA2BjB,QAA3B;AACH,KApLI;AAsLLuC,uBAtLK,+BAsLevC,QAtLf,EAsLyBU,KAtLzB,EAuLL;AAAA;;AACI,YAAI8B,MAAM,CAAV;AACA,YAAMC,SAAS,EAAf;AACA/B,cAAMgC,IAAN,CAAW,UAACC,CAAD,EAAGC,CAAH;AAAA,mBAASD,IAAIC,CAAb;AAAA,SAAX;AACA,YAAGvD,QAAQJ,QAAR,CAAiBS,MAAjB,CAAwBM,QAAxB,CAAH,EAAsC;AAClCU,kBAAMH,OAAN,CAAc,cAAM;AAChB,oBAAIM,OAAO,OAAKlD,UAAL,CAAgBkF,cAAhB,CAA+B,UAAUrC,EAAzC,CAAX;AACAK,qBAAKE,SAAL,CAAe,OAAK5C,YAApB;AACA0C,qBAAKiC,CAAL,GAASN,QAAQC,MAAjB;AACH,aAJD;AAKH,SAND,MAMO;AACH/B,kBAAMH,OAAN,CAAc,cAAM;AAChB,oBAAIM,OAAO/D,WAAWmC,QAAX,CAAoB6B,OAApB,CAA4BN,EAA5B,CAAX;AACAK,qBAAKE,SAAL,CAAe,OAAK5C,YAApB;AACA0C,qBAAKiC,CAAL,GAASN,QAAQC,MAAjB;AACH,aAJD;AAKH;AACJ,KAxMI;AA0MLM,cA1MK,wBA2ML;AACI,aAAK1F,OAAL,CAAa2F,WAAb;AACH,KA7MI;AA+MLC,iBA/MK,yBA+MSC,MA/MT,EAgNL;AACIpE,gBAAQC,GAAR,CAAYmE,MAAZ;AACH;AAlNI,CAAT","file":"MenuGame.js","sourceRoot":"../../../../../assets/Script/UI","sourcesContent":["\r\nvar MenuScene = require(\"MenuScene\");\r\nvar ObjectPool = require(\"ObjectPool\");\r\n\r\ncc.Class({\r\n    extends: MenuScene,\r\n\r\n    properties: {\r\n        onlineList: require(\"OnlineList\"),\r\n        chatBox: require(\"ChatBox\"),\r\n        SeatMgr: require(\"SeatMgr\"),\r\n        DealCards: require(\"DealCards\"),\r\n        ButtonLeave: cc.Node,\r\n        ButtonStart: cc.Node,\r\n        InGameButtons: cc.Node,\r\n        myCardNode: cc.Node,\r\n        friendCardNode: cc.Node,\r\n        rightPanelNode: cc.Node,\r\n        showRightButton: cc.Button,\r\n        showRightLabel: cc.Label,\r\n        throwButton: cc.Button,\r\n        playZoneNode: cc.Node,\r\n    },\r\n\r\n    start()\r\n    {\r\n        this.ButtonLeave.active = false;\r\n        this.ButtonStart.active = false;\r\n        this.InGameButtons.active = false;\r\n        this.onlineList.node.active = true;\r\n        this.chatBox.node.active = false;\r\n        this.seatOccupied = [false, false, false, false];\r\n    },\r\n\r\n    addPlayer(player)\r\n    {\r\n        this.onlineList.addPlayer(player);\r\n    },\r\n\r\n    removePlayer(player)\r\n    {\r\n        this.onlineList.removePlayer(player);\r\n    },\r\n\r\n    requestSeat(sender, seat)\r\n    {\r\n        console.log(\"request Seat\");\r\n        GSMgr.instance.requestSeat(parseInt(seat));\r\n    },\r\n\r\n    requestLeaveSeat()\r\n    {\r\n        GSMgr.instance.leaveSeat(GameMgr.instance.getMySeat());\r\n    },\r\n\r\n    playerEnterSeat(playerInfo, seat)\r\n    {\r\n        this.seatOccupied[seat] = true;\r\n        this.SeatMgr.onPlayerEnter(playerInfo, seat);\r\n        if (GameMgr.instance.IsMyId(playerInfo.id))\r\n        {\r\n            this.ButtonLeave.active = true;\r\n        }\r\n    },\r\n\r\n    playerLeaveSeat(seat)\r\n    {\r\n        if (GameMgr.instance.getMySeat() == seat)\r\n        {\r\n            this.ButtonLeave.active = false;\r\n            this.enableStartButton(false);\r\n        }\r\n        this.SeatMgr.onPlayerLeave(seat);\r\n    },\r\n\r\n    setHost(playerId)\r\n    {\r\n        this.SeatMgr.setHost(playerId);\r\n    },\r\n\r\n    enableStartButton(enable) {\r\n        this.ButtonStart.active = enable;\r\n    },\r\n\r\n    chatBoxClick()\r\n    {\r\n        this.onlineList.node.active = false;\r\n        this.chatBox.node.active = true;\r\n    },\r\n\r\n    onlineClick()\r\n    {\r\n        this.onlineList.node.active = true;\r\n        this.chatBox.node.active = false;\r\n    },\r\n\r\n    onStartGameClick()\r\n    {\r\n        GSMgr.instance.startGame();\r\n        this.ButtonStart.active = false;\r\n        this.friendCardNode.children.forEach(it => it.active = false);\r\n    },\r\n\r\n    onCardsReceived(cards)\r\n    {\r\n        let cardCount = 0;\r\n        this.DealCards.startAnim(()=>{\r\n            let card = ObjectPool.instance.getCard(cards[cardCount]);\r\n                card.setParent(this.myCardNode);\r\n            if (cardCount == 0)\r\n            {\r\n                this.friendCardNode.children.forEach(it => it.active = true);\r\n            }\r\n            cardCount += 1;\r\n        });\r\n        this.InGameButtons.active = true;\r\n        this.previousCards = null;\r\n        this.previousThrowPlayer = null;\r\n    },\r\n\r\n    onShowRightMenuClick()\r\n    {\r\n        var position = this.showRightButton.node.getPosition();\r\n        if (this.rightPanelNode.active == true) {\r\n            this.rightPanelNode.active = false;\r\n            this.showRightLabel.string = \"<<\";\r\n            return;\r\n        }\r\n        this.rightPanelNode.active = true;\r\n        this.showRightLabel.string = \">>\";\r\n    },\r\n\r\n    getSelectedCards()\r\n    {\r\n        var SelectedCards = [];\r\n        let cardList = this.myCardNode.getComponentsInChildren(\"Card\");\r\n            cardList.forEach(card => {\r\n                if (card.IsSelected())\r\n                SelectedCards.push(card.getCard());\r\n            })\r\n        return SelectedCards;\r\n    },\r\n\r\n    throwCards()\r\n    {\r\n        let cards = this.getSelectedCards();\r\n        GSMgr.instance.throwCards(cards);\r\n    },\r\n\r\n    skipTurn()\r\n    {\r\n        GSMgr.instance.skipTurn();\r\n    },\r\n\r\n    onTurnChange(playerId, startTime, timeout)\r\n    {\r\n        this.SeatMgr.onTurnChange(playerId, startTime, timeout);\r\n        if(GameMgr.instance.IsMyId(playerId))   {\r\n            this.InGameButtons.active = true;\r\n        } else {\r\n            this.InGameButtons.active = false;\r\n        }\r\n        this.throwButton.interactable = false;\r\n        if(this.previousThrowPlayer == playerId)\r\n        {\r\n            this.previousCards = null;\r\n        }\r\n    },\r\n\r\n    checkThrowable(enable)\r\n    {\r\n        if(GameHelper.validTurn(this.previousCards, this.getSelectedCards())) {\r\n            this.throwButton.interactable = true;\r\n        }\r\n        else {\r\n            this.throwButton.interactable = false;\r\n        }\r\n    },\r\n\r\n    onThrowSuccess(playerId, cards)\r\n    {\r\n        this.previousCards = GameHelper.parseCards(cards);\r\n        this.removeCardsFromHand(playerId, cards);\r\n        this.previousThrowPlayer = playerId;\r\n    },\r\n\r\n    removeCardsFromHand(playerId, cards)\r\n    {\r\n        let idx = 0;\r\n        const OFFSET = 50;\r\n        cards.sort((a,b) => a - b);\r\n        if(GameMgr.instance.IsMyId(playerId)) {\r\n            cards.forEach(it => {\r\n                let card = this.myCardNode.getChildByName(\"Card_\" + it);\r\n                card.setParent(this.playZoneNode);\r\n                card.x = idx++ * OFFSET;\r\n            });\r\n        } else {\r\n            cards.forEach(it => {\r\n                let card = ObjectPool.instance.getCard(it);\r\n                card.setParent(this.playZoneNode);\r\n                card.x = idx++ * OFFSET;\r\n            });\r\n        }\r\n    },\r\n\r\n    onGameOver()\r\n    {\r\n        this.SeatMgr.stopAllTurn();\r\n    },\r\n\r\n    displayResult(scores)\r\n    {\r\n        console.log(scores);\r\n    }\r\n});\r\n"]}