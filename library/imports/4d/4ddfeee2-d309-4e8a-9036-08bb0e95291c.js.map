{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\UI/assets\\Script\\UI\\SeatDisplay.js"],"names":["ObjectPool","require","cc","Class","extends","Component","properties","displayNode","Node","avatar","Sprite","userName","Label","money","hostIcon","turnCountDown","ProgressBar","resultNode","cardsNode","ResultIconPrefab","Prefab","onInit","index","position","active","node","IsMyTurn","ResultNodes","setPosition","log","display","playerInfo","playerId","id","photo","scriptData","Photo","displayName","ImageCache","loadAvatar","imgSprite","spriteFrame","console","string","getPlayerId","remove","setHost","isHost","displayTurn","startTime","timeout","timeStartTurn","timeoutTurnMill","timeEndTurn","disableCountDown","GetResultIcon","resultType","icon","instantiate","getComponent","init","hideResultIcon","removeAllChildren","showResultIcon","addChild","displayWinResult","bInstantWin","cards","displayCards","Define","RESULT","INSTANT","WIN","displayLoseResult","GameHelper","getLoseResultType","DEAD2","BURNED","FROZEN","LOSE","idx","forEach","card","instance","getCard","it","setParent","setScale","RecallCards","children","length","recall","update","dt","timeNow","Date","now","percent","progress","setReady","isReady","opacity","onClick","GSMgr","requestSeat"],"mappings":"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","file":"SeatDisplay.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\UI","sourcesContent":["var ObjectPool = require(\"ObjectPool\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        displayNode: cc.Node,\r\n        avatar: cc.Sprite,\r\n        userName: cc.Label,\r\n        money: cc.Label,\r\n        hostIcon: cc.Node,\r\n        turnCountDown: cc.ProgressBar,\r\n        resultNode: cc.Node,\r\n        cardsNode: cc.Node,\r\n        ResultIconPrefab : cc.Prefab,\r\n        resultNode : cc.Node,\r\n    },\r\n\r\n    onInit(index, position)\r\n    {\r\n        this.displayNode.active = false;\r\n        this.hostIcon.active = false;\r\n        this.turnCountDown.node.active = false;\r\n        this.IsMyTurn = false;\r\n        this.resultNode.active = false;\r\n        this.cardsNode.active = false;\r\n        this.ResultNodes = {};\r\n        this.index = index;\r\n        this.node.setPosition(position);\r\n        cc.log(position);\r\n    },\r\n\r\n    display(playerInfo)\r\n    {\r\n        this.playerId = playerInfo.id;\r\n        let photo = playerInfo.scriptData.Photo;\r\n        let displayName = playerInfo.displayName;\r\n\r\n        ImageCache.loadAvatar(this.playerId, photo, (imgSprite)=>{\r\n            if (imgSprite)\r\n            {\r\n                this.avatar.spriteFrame = imgSprite;\r\n            }\r\n            else\r\n            {\r\n                console.log(\"Error while loading user avatar \" + this.playerId);\r\n            }\r\n            this.userName.string = displayName;\r\n            this.displayNode.active = true;\r\n        });\r\n    },\r\n\r\n    getPlayerId()\r\n    {\r\n        return this.playerId;\r\n    },\r\n\r\n    remove()\r\n    {\r\n        this.playerId = null;\r\n        this.hostIcon.active = false;\r\n        this.displayNode.active = false;\r\n    },\r\n\r\n    setHost(isHost)\r\n    {\r\n        this.hostIcon.active = isHost;\r\n    },\r\n\r\n    displayTurn(startTime, timeout)\r\n    {\r\n        this.turnCountDown.node.active = true;\r\n        this.timeStartTurn = startTime;\r\n        this.timeoutTurnMill = timeout * 1000;\r\n        this.timeEndTurn = this.timeStartTurn + this.timeoutTurnMill;\r\n        this.IsMyTurn = true;\r\n    },\r\n\r\n    disableCountDown()\r\n    {\r\n        this.IsMyTurn = false;\r\n        this.turnCountDown.node.active = false;\r\n    },\r\n\r\n    GetResultIcon(resultType)\r\n    {\r\n        if(this.ResultNodes[resultType] == null)\r\n        {\r\n            let icon = cc.instantiate(this.ResultIconPrefab).getComponent(\"ResultIcon\");\r\n            icon.init(resultType);\r\n            this.ResultNodes[resultType] = icon.node;\r\n        }\r\n        return this.ResultNodes[resultType];\r\n    },\r\n\r\n    hideResultIcon()\r\n    {\r\n        this.resultNode.removeAllChildren();\r\n        this.resultNode.active = false;\r\n    },\r\n    \r\n    showResultIcon(resultType)\r\n    {\r\n        this.resultNode.addChild(this.GetResultIcon(resultType))\r\n    },\r\n\r\n    displayWinResult(bInstantWin, cards)\r\n    {\r\n        if(bInstantWin) \r\n        {\r\n            this.displayCards(cards);\r\n            this.showResultIcon(Define.RESULT.INSTANT);\r\n        }\r\n        else \r\n        {\r\n            this.showResultIcon(Define.RESULT.WIN);\r\n        }\r\n        this.resultNode.active = true;\r\n    },\r\n\r\n    displayLoseResult(bInstantWin, cards)\r\n    {   \r\n        this.displayCards(cards);\r\n        var resultType = GameHelper.getLoseResultType(bInstantWin, cards);\r\n        if(resultType & Define.RESULT.DEAD2)\r\n        {\r\n            this.showResultIcon(Define.RESULT.DEAD2);\r\n        }\r\n        if(resultType & Define.RESULT.BURNED)\r\n        {\r\n            this.showResultIcon(Define.RESULT.BURNED);\r\n        }\r\n        if(resultType & Define.RESULT.FROZEN)\r\n        {\r\n            this.showResultIcon(Define.RESULT.FROZEN);\r\n        }\r\n        if(resultType == Define.RESULT.LOSE)\r\n        {\r\n            this.showResultIcon(Define.RESULT.LOSE);\r\n        }\r\n        this.resultNode.active = true;\r\n    },\r\n\r\n    displayCards(cards)\r\n    {\r\n        let idx = 0;\r\n        this.cardsNode.active = true;\r\n        cards.forEach(it => {\r\n            let card = ObjectPool.instance.getCard(it);\r\n            if(card != null)                \r\n            {\r\n                card.setParent(this.cardsNode);\r\n                card.setScale(0.5, 0.5);\r\n                card.setPosition(0, 0);\r\n            }\r\n        });\r\n    },\r\n\r\n    RecallCards()\r\n    {\r\n        while (this.cardsNode.children.length > 0)\r\n        {\r\n            this.cardsNode.children[0].setPosition(0, 0);\r\n            this.cardsNode.children[0].setScale(1, 1);\r\n            ObjectPool.instance.recall(this.cardsNode.children[0]);\r\n        }\r\n        this.cardsNode.active = false;\r\n    },\r\n\r\n    update(dt)\r\n    {\r\n        if (this.IsMyTurn)\r\n        {\r\n            let timeNow = Date.now();\r\n            let percent = (this.timeEndTurn - timeNow) / this.timeoutTurnMill;\r\n            if (percent > 0)\r\n            {\r\n                this.turnCountDown.progress = percent;\r\n            }\r\n            else\r\n            {\r\n                this.IsMyTurn = false;\r\n                this.turnCountDown.progress = 0;\r\n                this.turnCountDown.node.active = false;\r\n            }\r\n        }\r\n    },\r\n\r\n    setReady(isReady)\r\n    {\r\n        if (isReady)\r\n        {\r\n            this.node.opacity = 255;\r\n        }\r\n        else\r\n        {\r\n            this.node.opacity = 125;\r\n        }\r\n    },\r\n\r\n    onClick()\r\n    {\r\n        GSMgr.instance.requestSeat(this.index);\r\n    }\r\n});\r\n"]}