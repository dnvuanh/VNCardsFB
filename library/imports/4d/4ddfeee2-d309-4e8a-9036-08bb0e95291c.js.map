{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\UI/assets\\Script\\UI\\SeatDisplay.js"],"names":["ObjectPool","require","cc","Class","extends","Component","properties","displayNode","Node","avatar","Sprite","userName","Label","money","hostIcon","turnCountDown","ProgressBar","resultNode","cardsNode","ResultIconPrefab","Prefab","onLoad","active","node","IsMyTurn","display","playerInfo","playerId","id","photo","scriptData","Photo","displayName","ImageCache","loadAvatar","imgSprite","spriteFrame","console","log","string","getPlayerId","remove","setHost","isHost","displayTurn","startTime","timeout","timeStartTurn","timeoutTurnMill","timeEndTurn","disableCountDown","GetResultIcon","resultType","icon","instantiate","getComponent","init","hideResultIcon","displayWinResult","bInstantWin","cards","displayCards","addChild","Define","RESULT","INSTANT","WIN","displayLoseResult","GameHelper","getLoseResultType","DEAD2","BURNED","FROZEN","LOSE","idx","forEach","card","instance","getCard","it","setParent","setScale","setPosition","RecallCards","children","length","recall","update","dt","timeNow","Date","now","percent","progress","setReady","isReady","opacity"],"mappings":"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","file":"SeatDisplay.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\UI","sourcesContent":["var ObjectPool = require(\"ObjectPool\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        displayNode: cc.Node,\r\n        avatar: cc.Sprite,\r\n        userName: cc.Label,\r\n        money: cc.Label,\r\n        hostIcon: cc.Node,\r\n        turnCountDown: cc.ProgressBar,\r\n        resultNode: cc.Node,\r\n        cardsNode: cc.Node,\r\n        ResultIconPrefab : cc.Prefab,\r\n        resultNode : cc.Node,\r\n    },\r\n\r\n    onLoad()\r\n    {\r\n        this.displayNode.active = false;\r\n        this.hostIcon.active = false;\r\n        this.turnCountDown.node.active = false;\r\n        this.IsMyTurn = false;\r\n        this.resultNode.active = false;\r\n        this.cardsNode.active = false;\r\n    },\r\n\r\n    display(playerInfo)\r\n    {\r\n        this.playerId = playerInfo.id;\r\n        let photo = playerInfo.scriptData.Photo;\r\n        let displayName = playerInfo.displayName;\r\n\r\n        ImageCache.loadAvatar(this.playerId, photo, (imgSprite)=>{\r\n            if (imgSprite)\r\n            {\r\n                this.avatar.spriteFrame = imgSprite;\r\n            }\r\n            else\r\n            {\r\n                console.log(\"Error while loading user avatar \" + this.playerId);\r\n            }\r\n            this.userName.string = displayName;\r\n            this.displayNode.active = true;\r\n        });\r\n    },\r\n\r\n    getPlayerId()\r\n    {\r\n        return this.playerId;\r\n    },\r\n\r\n    remove()\r\n    {\r\n        this.playerId = null;\r\n        this.hostIcon.active = false;\r\n        this.displayNode.active = false;\r\n    },\r\n\r\n    setHost(isHost)\r\n    {\r\n        this.hostIcon.active = isHost;\r\n    },\r\n\r\n    displayTurn(startTime, timeout)\r\n    {\r\n        this.turnCountDown.node.active = true;\r\n        this.timeStartTurn = startTime;\r\n        this.timeoutTurnMill = timeout * 1000;\r\n        this.timeEndTurn = this.timeStartTurn + this.timeoutTurnMill;\r\n        this.IsMyTurn = true;\r\n    },\r\n\r\n    disableCountDown()\r\n    {\r\n        this.IsMyTurn = false;\r\n        this.turnCountDown.node.active = false;\r\n    },\r\n\r\n    GetResultIcon(resultType)\r\n    {\r\n        let icon = cc.instantiate(this.ResultIconPrefab).getComponent(\"ResultIcon\");\r\n        icon.init(resultType);\r\n        return icon.node;\r\n    },\r\n\r\n    hideResultIcon()\r\n    {\r\n        this.resultNode.active = false;\r\n    }, \r\n\r\n    displayWinResult(bInstantWin, cards)\r\n    {\r\n        if(bInstantWin) \r\n        {\r\n            this.displayCards(cards);\r\n            this.resultNode.addChild(this.GetResultIcon(Define.RESULT.INSTANT));\r\n        }\r\n        else \r\n        {\r\n            this.resultNode.addChild(this.GetResultIcon(Define.RESULT.WIN));\r\n        }\r\n        this.resultNode.active = true;\r\n    },\r\n\r\n    displayLoseResult(bInstantWin, cards)\r\n    {   \r\n        this.displayCards(cards);\r\n        var resultType = GameHelper.getLoseResultType(bInstantWin, cards);\r\n        if(resultType & Define.RESULT.DEAD2)\r\n        {\r\n            this.resultNode.addChild(this.GetResultIcon(Define.RESULT.DEAD2));\r\n        }\r\n        if(resultType & Define.RESULT.BURNED)\r\n        {\r\n            this.resultNode.addChild(this.GetResultIcon(Define.RESULT.BURNED));\r\n        }\r\n        if(resultType & Define.RESULT.FROZEN)\r\n        {\r\n            this.resultNode.addChild(this.GetResultIcon(Define.RESULT.FROZEN));\r\n        }\r\n        if(resultType == Define.RESULT.LOSE)\r\n        {\r\n            this.resultNode.addChild(this.GetResultIcon(Define.RESULT.LOSE));\r\n        }\r\n        this.resultNode.active = true;\r\n    },\r\n\r\n    displayCards(cards)\r\n    {\r\n        let idx = 0;\r\n        this.cardsNode.active = true;\r\n        cards.forEach(it => {\r\n            let card = ObjectPool.instance.getCard(it);\r\n            if(card != null)                \r\n            {\r\n                card.setParent(this.cardsNode);\r\n                card.setScale(0.5, 0.5);\r\n                card.setPosition(0, 0);\r\n            }\r\n        });\r\n    },\r\n\r\n    RecallCards()\r\n    {\r\n        while (this.cardsNode.children.length > 0)\r\n        {\r\n            this.cardsNode.children[0].setPosition(0, 0);\r\n            this.cardsNode.children[0].setScale(1, 1);\r\n            ObjectPool.instance.recall(this.cardsNode.children[0]);\r\n        }\r\n        this.cardsNode.active = false;\r\n    },\r\n\r\n    update(dt)\r\n    {\r\n        if (this.IsMyTurn)\r\n        {\r\n            let timeNow = Date.now();\r\n            let percent = (this.timeEndTurn - timeNow) / this.timeoutTurnMill;\r\n            if (percent > 0)\r\n            {\r\n                this.turnCountDown.progress = percent;\r\n            }\r\n            else\r\n            {\r\n                this.IsMyTurn = false;\r\n                this.turnCountDown.progress = 0;\r\n                this.turnCountDown.node.active = false;\r\n            }\r\n        }\r\n    },\r\n\r\n    setReady(isReady)\r\n    {\r\n        if (isReady)\r\n        {\r\n            this.node.opacity = 255;\r\n        }\r\n        else\r\n        {\r\n            this.node.opacity = 125;\r\n        }\r\n    }\r\n});\r\n"]}