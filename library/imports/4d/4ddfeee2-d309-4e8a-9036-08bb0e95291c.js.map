{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\UI/assets\\Script\\UI\\SeatDisplay.js"],"names":["ObjectPool","require","cc","Class","extends","Component","properties","displayNode","Node","avatar","Sprite","userName","Label","money","hostIcon","turnCountDown","ProgressBar","resultNode","cardsNode","ResultIconPrefab","Prefab","onLoad","active","node","IsMyTurn","ResultNodes","display","playerInfo","playerId","id","photo","scriptData","Photo","displayName","ImageCache","loadAvatar","imgSprite","spriteFrame","console","log","string","getPlayerId","remove","setHost","isHost","displayTurn","startTime","timeout","timeStartTurn","timeoutTurnMill","timeEndTurn","disableCountDown","GetResultIcon","resultType","icon","instantiate","getComponent","init","hideResultIcon","removeAllChildren","showResultIcon","addChild","displayWinResult","bInstantWin","cards","displayCards","Define","RESULT","INSTANT","WIN","displayLoseResult","GameHelper","getLoseResultType","DEAD2","BURNED","FROZEN","LOSE","idx","forEach","card","instance","getCard","it","setParent","setScale","setPosition","RecallCards","children","length","recall","update","dt","timeNow","Date","now","percent","progress","setReady","isReady","opacity"],"mappings":"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","file":"SeatDisplay.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\UI","sourcesContent":["var ObjectPool = require(\"ObjectPool\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        displayNode: cc.Node,\r\n        avatar: cc.Sprite,\r\n        userName: cc.Label,\r\n        money: cc.Label,\r\n        hostIcon: cc.Node,\r\n        turnCountDown: cc.ProgressBar,\r\n        resultNode: cc.Node,\r\n        cardsNode: cc.Node,\r\n        ResultIconPrefab : cc.Prefab,\r\n        resultNode : cc.Node,\r\n    },\r\n\r\n    onLoad()\r\n    {\r\n        this.displayNode.active = false;\r\n        this.hostIcon.active = false;\r\n        this.turnCountDown.node.active = false;\r\n        this.IsMyTurn = false;\r\n        this.resultNode.active = false;\r\n        this.cardsNode.active = false;\r\n        this.ResultNodes = {};\r\n    },\r\n\r\n    display(playerInfo)\r\n    {\r\n        this.playerId = playerInfo.id;\r\n        let photo = playerInfo.scriptData.Photo;\r\n        let displayName = playerInfo.displayName;\r\n\r\n        ImageCache.loadAvatar(this.playerId, photo, (imgSprite)=>{\r\n            if (imgSprite)\r\n            {\r\n                this.avatar.spriteFrame = imgSprite;\r\n            }\r\n            else\r\n            {\r\n                console.log(\"Error while loading user avatar \" + this.playerId);\r\n            }\r\n            this.userName.string = displayName;\r\n            this.displayNode.active = true;\r\n        });\r\n    },\r\n\r\n    getPlayerId()\r\n    {\r\n        return this.playerId;\r\n    },\r\n\r\n    remove()\r\n    {\r\n        this.playerId = null;\r\n        this.hostIcon.active = false;\r\n        this.displayNode.active = false;\r\n    },\r\n\r\n    setHost(isHost)\r\n    {\r\n        this.hostIcon.active = isHost;\r\n    },\r\n\r\n    displayTurn(startTime, timeout)\r\n    {\r\n        this.turnCountDown.node.active = true;\r\n        this.timeStartTurn = startTime;\r\n        this.timeoutTurnMill = timeout * 1000;\r\n        this.timeEndTurn = this.timeStartTurn + this.timeoutTurnMill;\r\n        this.IsMyTurn = true;\r\n    },\r\n\r\n    disableCountDown()\r\n    {\r\n        this.IsMyTurn = false;\r\n        this.turnCountDown.node.active = false;\r\n    },\r\n\r\n    GetResultIcon(resultType)\r\n    {\r\n        if(this.ResultNodes[resultType] == null)\r\n        {\r\n            let icon = cc.instantiate(this.ResultIconPrefab).getComponent(\"ResultIcon\");\r\n            icon.init(resultType);\r\n            this.ResultNodes[resultType] = icon.node;\r\n        }\r\n        return this.ResultNodes[resultType];\r\n    },\r\n\r\n    hideResultIcon()\r\n    {\r\n        this.resultNode.removeAllChildren();\r\n        this.resultNode.active = false;\r\n    },\r\n    \r\n    showResultIcon(resultType)\r\n    {\r\n        this.resultNode.addChild(this.GetResultIcon(resultType))\r\n    },\r\n\r\n    displayWinResult(bInstantWin, cards)\r\n    {\r\n        if(bInstantWin) \r\n        {\r\n            this.displayCards(cards);\r\n            this.showResultIcon(Define.RESULT.INSTANT);\r\n        }\r\n        else \r\n        {\r\n            this.showResultIcon(Define.RESULT.WIN);\r\n        }\r\n        this.resultNode.active = true;\r\n    },\r\n\r\n    displayLoseResult(bInstantWin, cards)\r\n    {   \r\n        this.displayCards(cards);\r\n        var resultType = GameHelper.getLoseResultType(bInstantWin, cards);\r\n        if(resultType & Define.RESULT.DEAD2)\r\n        {\r\n            this.showResultIcon(Define.RESULT.DEAD2);\r\n        }\r\n        if(resultType & Define.RESULT.BURNED)\r\n        {\r\n            this.showResultIcon(Define.RESULT.BURNED);\r\n        }\r\n        if(resultType & Define.RESULT.FROZEN)\r\n        {\r\n            this.showResultIcon(Define.RESULT.FROZEN);\r\n        }\r\n        if(resultType == Define.RESULT.LOSE)\r\n        {\r\n            this.showResultIcon(Define.RESULT.LOSE);\r\n        }\r\n        this.resultNode.active = true;\r\n    },\r\n\r\n    displayCards(cards)\r\n    {\r\n        let idx = 0;\r\n        this.cardsNode.active = true;\r\n        cards.forEach(it => {\r\n            let card = ObjectPool.instance.getCard(it);\r\n            if(card != null)                \r\n            {\r\n                card.setParent(this.cardsNode);\r\n                card.setScale(0.5, 0.5);\r\n                card.setPosition(0, 0);\r\n            }\r\n        });\r\n    },\r\n\r\n    RecallCards()\r\n    {\r\n        while (this.cardsNode.children.length > 0)\r\n        {\r\n            this.cardsNode.children[0].setPosition(0, 0);\r\n            this.cardsNode.children[0].setScale(1, 1);\r\n            ObjectPool.instance.recall(this.cardsNode.children[0]);\r\n        }\r\n        this.cardsNode.active = false;\r\n    },\r\n\r\n    update(dt)\r\n    {\r\n        if (this.IsMyTurn)\r\n        {\r\n            let timeNow = Date.now();\r\n            let percent = (this.timeEndTurn - timeNow) / this.timeoutTurnMill;\r\n            if (percent > 0)\r\n            {\r\n                this.turnCountDown.progress = percent;\r\n            }\r\n            else\r\n            {\r\n                this.IsMyTurn = false;\r\n                this.turnCountDown.progress = 0;\r\n                this.turnCountDown.node.active = false;\r\n            }\r\n        }\r\n    },\r\n\r\n    setReady(isReady)\r\n    {\r\n        if (isReady)\r\n        {\r\n            this.node.opacity = 255;\r\n        }\r\n        else\r\n        {\r\n            this.node.opacity = 125;\r\n        }\r\n    }\r\n});\r\n"]}