{"version":3,"sources":["../../../../../assets/Script/Manager/assets/Script/Manager/GSMgr.js"],"names":["GSMgr","cc","Class","extends","Component","properties","APIKey","String","Secret","statics","instance","ctor","onLoad","game","addPersistRootNode","node","RTMessagesListeners","Init","callback","Inited","GameSparks","callbackInit","initPreview","key","secret","credential","onNonce","bind","onInit","onMessage","logger","console","log","initRTSession","nonce","CryptoJS","enc","Base64","stringify","HmacSHA256","message","GameMgr","OnMatchFound","accessToken","host","port","myRTSession","stop","myTimer","clearTimeout","setInterval","mainRTLoop","start","OnMatchUpdate","registrationRequest","displayName","username","password","photo","onResponse","request","sendWithData","authenticationRequest","enterRoomRequest","gameType","groupName","createChallengeRequest","shortCode","minPlayers","maxPlayers","numCycles","started","onPlayerConnect","onPlayerConnected","onPlayerDisconnect","onPlayerDisconnected","onReady","onSessionReady","onPacket","onPacketReceived","session","startRTSession","stopRTSession","res","triggerCallback","opCode","data","connectToken","index","indexOf","theHost","slice","GameSparksRT","getSession","peers","activePeers","peerId","update","RTData","get","setLong","sendRTData","deliveryIntent","RELIABLE","registerOpCodeCallback","push","listeners","i","code","requestSeat","seat","ServerCode","RQ_ENTER_SEAT"],"mappings":"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","file":"GSMgr.js","sourceRoot":"../../../../../assets/Script/Manager","sourcesContent":["var GSMgr = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        APIKey: cc.String,\n        Secret: cc.String,\n    },\n    \n    statics:\n    {\n        instance: null,\n    },\n\n    ctor: function () {\n        \n    },\n    \n    onLoad()\n    {\n        GSMgr.instance = this;\n        cc.game.addPersistRootNode(this.node);\n        this.RTMessagesListeners = {};\n    },\n\n    Init (callback) {\n        this.Inited = false;\n        this.GameSparks = new GameSparks();\n        this.callbackInit = callback;\n\n\t\tthis.GameSparks.initPreview({\n\t\t\tkey: this.APIKey, \n\t\t\tsecret: this.Secret,\n\t\t\tcredential: \"\",\n\t\t\tonNonce: this.onNonce.bind(this),\n\t\t\tonInit: this.onInit.bind(this),\n\t\t\tonMessage: this.onMessage.bind(this),\n\t\t\tlogger: console.log,\n        });\n        this.initRTSession();\n    },\n        \n    onNonce(nonce)\n    {\n        return CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(nonce, this.Secret));\n    },\n    \n    onInit()\n    {\n        this.Inited = true;\n        this.callbackInit();\n    },\n    \n    onMessage(message)\n    {\n        switch (message[\"@class\"]) {\n            case \".MatchFoundMessage\":\n                GameMgr.instance.OnMatchFound(message);\n                var accessToken = message[\"accessToken\"];\n\t\t\t    var host = message[\"host\"];\n\t\t\t    var port = message[\"port\"];\n    \t\t\tthis.myRTSession.stop();\n                if (this.myTimer) {\n                    clearTimeout(this.myTimer);\n                }\n\t\t\t    this.myTimer = setInterval(this.mainRTLoop.bind(this), 10);\n\t\t\t    this.myRTSession.start(accessToken, host, port);\n                break;\n\n            case \".MatchUpdatedMessage\":\n                GameMgr.instance.OnMatchUpdate(message);\n                break;\n        }\n    },\n\n    registrationRequest(displayName, username, password, photo, onResponse)\n    {\n        var request = {};\n            request[\"displayName\"] = displayName;\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n            request[\"scriptData\"] = {\n                \"InstantID\":username,\n                \"Photo\":photo\n            }\n        this.GameSparks.sendWithData(\"RegistrationRequest\", request, onResponse);\n    },\n\n    authenticationRequest(username, password, onResponse)\n    {\n        var request = {};\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n        \n        this.GameSparks.sendWithData(\"AuthenticationRequest\", request, onResponse);\n    },\n\n    enterRoomRequest(gameType, groupName, onResponse)\n    {\n        var request = {};\n            request[\"matchShortCode\"] = gameType;\n            request[\"matchGroup\"] = groupName;\n            request[\"skill\"] = 0;\n        \n        this.GameSparks.sendWithData(\"MatchmakingRequest\", request, onResponse);\n    },\n\n    createChallengeRequest(shortCode, minPlayers, maxPlayers, onResponse)\n    {\n        var request = {};\n            request[\"challengeShortCode\"] = shortCode;\n            request[\"maxPlayers\"] = maxPlayers;\n            request[\"minPlayers\"] = minPlayers;\n            request[\"accessType\"] = \"PUBLIC\";\n            request[\"endTime\"] = \"2030-07-24T00:53Z\";\n\n        this.GameSparks.sendWithData(\"CreateChallengeRequest\", request, onResponse);\n    },\n\n    initRTSession() {\n        this.myTimer = null;\n        this.numCycles = 0;\n        this.myRTSession = {\n            started: false,\n            onPlayerConnect: this.onPlayerConnected.bind(this),\n            onPlayerDisconnect: this.onPlayerDisconnected.bind(this),\n            onReady: this.onSessionReady.bind(this),\n            onPacket: this.onPacketReceived.bind(this),\n            session: null,\n            start: this.startRTSession.bind(this),\n            stop: this.stopRTSession.bind(this),\n            log: this.log.bind(this)\n        }\n    },\n\n    onPlayerConnected(res) {\n        console.log(\"onPlayerConnectedCB\", res);\n    },\n\n    onPlayerDisconnected(res) {\n        console.log(\"onPlayerDisconnected\", res);\n    },\n\n    onSessionReady(res) {\n        cc.log(\"onSessionReady\", res);\n    },\n\n    onPacketReceived(res) {\n        this.triggerCallback(res.opCode, res.data);\n    },\n\n    startRTSession(connectToken, host, port) {\n        var index = host.indexOf(\":\");\n        var theHost;\n\n        if (index > 0) {\n            theHost = host.slice(0, index);\n        } else {\n            theHost = host;\n        }\n\n        console.log(theHost + \" : \" + port);\n\n        this.myRTSession.session = GameSparksRT.getSession(connectToken, theHost, port, this.myRTSession);\n        if (this.myRTSession.session != null) {\n            this.myRTSession.started = true;\n\n            this.myRTSession.session.start();\n        } else {\n            this.myRTSession.started = false;\n        }\n    },\n\n    stopRTSession() {\n        this.myRTSession.started = false;\n\n        if (this.myRTSession.session != null) {\n            this.myRTSession.session.stop();\n        }\n    },\n\n    log(message) {\n        let peers = \"|\";\n\n        for (var index in this.myRTSession.session.activePeers) {\n            peers = peers + this.myRTSession.session.activePeers[index] + \"|\";\n        }\n\n        console.log(this.myRTSession.session.peerId + \": \" + message + \" peers:\" + peers);\n    },\n\n    mainRTLoop()\n    {\n        if (this.myRTSession.started) {\n\t\t\tthis.myRTSession.session.update();\n\n\t\t\tvar data = RTData.get();\n\n\t\t\tdata.setLong(1, this.numCycles);\n\n            this.myRTSession.session.sendRTData(1, GameSparksRT.deliveryIntent.RELIABLE, data, []);\n\n\t\t\tthis.numCycles ++;\n\t\t}\n    },\n\n    registerOpCodeCallback(opCode, callback) {\n        if (!this.RTMessagesListeners[opCode]) {\n            this.RTMessagesListeners[opCode] = [];\n        }\n        this.RTMessagesListeners[opCode].push(callback);\n    },\n\n    triggerCallback(opCode, data) {\n        let listeners = this.RTMessagesListeners[opCode];\n        if (listeners) {\n            for (let i in listeners) {\n                listeners[i](data);\n            }\n        }\n    },\n\n    sendRTData(code, data)\n    {\n        this.myRTSession.session.sendRTData(code, GameSparksRT.deliveryIntent.RELIABLE, data, [0]);\n    },\n\n    //game\n    requestSeat(seat)\n    {\n        let data = RTData.get();\n            data.setLong(1, seat);\n\n        this.sendRTData(ServerCode.RQ_ENTER_SEAT, data);\n    }\n});"]}