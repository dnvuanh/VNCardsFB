{"version":3,"sources":["../../../../../assets/Script/Manager/assets/Script/Manager/GSMgr.js"],"names":["GSMgr","cc","Class","extends","Component","properties","APIKey","String","Secret","statics","instance","ctor","onLoad","game","addPersistRootNode","node","RTMessagesListeners","Init","callback","Inited","GameSparks","callbackInit","initPreview","key","secret","credential","onNonce","bind","onInit","onMessage","logger","console","log","initRTSession","nonce","CryptoJS","enc","Base64","stringify","HmacSHA256","message","GameMgr","OnMatchFound","accessToken","host","port","myRTSession","stop","myTimer","clearTimeout","setInterval","mainRTLoop","start","OnMatchUpdate","UpdateUserInfo","registrationRequest","displayName","username","password","photo","onResponse","request","sendWithData","authenticationRequest","enterRoomRequest","gameType","groupName","createChallengeRequest","shortCode","minPlayers","maxPlayers","numCycles","started","onPlayerConnect","onPlayerConnected","onPlayerDisconnect","onPlayerDisconnected","onReady","onSessionReady","onPacket","onPacketReceived","session","startRTSession","stopRTSession","res","triggerCallback","opCode","data","connectToken","index","indexOf","theHost","slice","GameSparksRT","getSession","peers","activePeers","peerId","update","RTData","get","setLong","sendRTData","deliveryIntent","RELIABLE","registerOpCodeCallback","push","listeners","i","code","requestSeat","seat","ServerCode","RQ_ENTER_SEAT","leaveSeat","RQ_LEAVE_SEAT","startGame","RQ_START_GAME","throwCards","cards","cardString","JSON","setString","RQ_THROW_CARDS","skipTurn","RQ_SKIP_TURN"],"mappings":"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","file":"GSMgr.js","sourceRoot":"../../../../../assets/Script/Manager","sourcesContent":["var GSMgr = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        APIKey: cc.String,\r\n        Secret: cc.String,\r\n    },\r\n    \r\n    statics:\r\n    {\r\n        instance: null,\r\n    },\r\n\r\n    ctor: function () {\r\n        \r\n    },\r\n    \r\n    onLoad()\r\n    {\r\n        GSMgr.instance = this;\r\n        cc.game.addPersistRootNode(this.node);\r\n        this.RTMessagesListeners = {};\r\n    },\r\n\r\n    Init (callback) {\r\n        this.Inited = false;\r\n        this.GameSparks = new GameSparks();\r\n        this.callbackInit = callback;\r\n\r\n\t\tthis.GameSparks.initPreview({\r\n\t\t\tkey: this.APIKey, \r\n\t\t\tsecret: this.Secret,\r\n\t\t\tcredential: \"\",\r\n\t\t\tonNonce: this.onNonce.bind(this),\r\n\t\t\tonInit: this.onInit.bind(this),\r\n\t\t\tonMessage: this.onMessage.bind(this),\r\n\t\t\tlogger: console.log,\r\n        });\r\n        this.initRTSession();\r\n    },\r\n        \r\n    onNonce(nonce)\r\n    {\r\n        return CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(nonce, this.Secret));\r\n    },\r\n    \r\n    onInit()\r\n    {\r\n        this.Inited = true;\r\n        this.callbackInit();\r\n    },\r\n    \r\n    onMessage(message)\r\n    {\r\n        switch (message[\"@class\"]) {\r\n            case \".MatchFoundMessage\":\r\n                GameMgr.instance.OnMatchFound(message);\r\n                var accessToken = message[\"accessToken\"];\r\n\t\t\t    var host = message[\"host\"];\r\n\t\t\t    var port = message[\"port\"];\r\n    \t\t\tthis.myRTSession.stop();\r\n                if (this.myTimer) {\r\n                    clearTimeout(this.myTimer);\r\n                }\r\n\t\t\t    this.myTimer = setInterval(this.mainRTLoop.bind(this), 10);\r\n\t\t\t    this.myRTSession.start(accessToken, host, port);\r\n                break;\r\n\r\n            case \".MatchUpdatedMessage\":\r\n                GameMgr.instance.OnMatchUpdate(message);\r\n                break;\r\n            case \".AuthenticationResponse\":\r\n                GameMgr.instance.UpdateUserInfo(message);\r\n                break;\r\n        }\r\n    },\r\n\r\n    registrationRequest(displayName, username, password, photo, onResponse)\r\n    {\r\n        var request = {};\r\n            request[\"displayName\"] = displayName;\r\n            request[\"userName\"] = username;\r\n            request[\"password\"] = password;\r\n            request[\"scriptData\"] = {\r\n                \"InstantID\":username,\r\n                \"Photo\":photo\r\n            }\r\n        this.GameSparks.sendWithData(\"RegistrationRequest\", request, onResponse);\r\n    },\r\n\r\n    authenticationRequest(username, password, onResponse)\r\n    {\r\n        var request = {};\r\n            request[\"userName\"] = username;\r\n            request[\"password\"] = password;\r\n        \r\n        this.GameSparks.sendWithData(\"AuthenticationRequest\", request, onResponse);\r\n    },\r\n\r\n    enterRoomRequest(gameType, groupName, onResponse)\r\n    {\r\n        var request = {};\r\n            request[\"matchShortCode\"] = gameType;\r\n            request[\"matchGroup\"] = groupName;\r\n            request[\"skill\"] = 0;\r\n        \r\n        this.GameSparks.sendWithData(\"MatchmakingRequest\", request, onResponse);\r\n    },\r\n\r\n    createChallengeRequest(shortCode, minPlayers, maxPlayers, onResponse)\r\n    {\r\n        var request = {};\r\n            request[\"challengeShortCode\"] = shortCode;\r\n            request[\"maxPlayers\"] = maxPlayers;\r\n            request[\"minPlayers\"] = minPlayers;\r\n            request[\"accessType\"] = \"PUBLIC\";\r\n            request[\"endTime\"] = \"2030-07-24T00:53Z\";\r\n\r\n        this.GameSparks.sendWithData(\"CreateChallengeRequest\", request, onResponse);\r\n    },\r\n\r\n    initRTSession() {\r\n        this.myTimer = null;\r\n        this.numCycles = 0;\r\n        this.myRTSession = {\r\n            started: false,\r\n            onPlayerConnect: this.onPlayerConnected.bind(this),\r\n            onPlayerDisconnect: this.onPlayerDisconnected.bind(this),\r\n            onReady: this.onSessionReady.bind(this),\r\n            onPacket: this.onPacketReceived.bind(this),\r\n            session: null,\r\n            start: this.startRTSession.bind(this),\r\n            stop: this.stopRTSession.bind(this),\r\n            log: this.log.bind(this)\r\n        }\r\n    },\r\n\r\n    onPlayerConnected(res) {\r\n        console.log(\"onPlayerConnectedCB\", res);\r\n    },\r\n\r\n    onPlayerDisconnected(res) {\r\n        console.log(\"onPlayerDisconnected\", res);\r\n    },\r\n\r\n    onSessionReady(res) {\r\n        cc.log(\"onSessionReady\", res);\r\n    },\r\n\r\n    onPacketReceived(res) {\r\n        this.triggerCallback(res.opCode, res.data);\r\n    },\r\n\r\n    startRTSession(connectToken, host, port) {\r\n        var index = host.indexOf(\":\");\r\n        var theHost;\r\n\r\n        if (index > 0) {\r\n            theHost = host.slice(0, index);\r\n        } else {\r\n            theHost = host;\r\n        }\r\n\r\n        console.log(theHost + \" : \" + port);\r\n\r\n        this.myRTSession.session = GameSparksRT.getSession(connectToken, theHost, port, this.myRTSession);\r\n        if (this.myRTSession.session != null) {\r\n            this.myRTSession.started = true;\r\n\r\n            this.myRTSession.session.start();\r\n        } else {\r\n            this.myRTSession.started = false;\r\n        }\r\n    },\r\n\r\n    stopRTSession() {\r\n        this.myRTSession.started = false;\r\n\r\n        if (this.myRTSession.session != null) {\r\n            this.myRTSession.session.stop();\r\n        }\r\n    },\r\n\r\n    log(message) {\r\n        let peers = \"|\";\r\n\r\n        for (var index in this.myRTSession.session.activePeers) {\r\n            peers = peers + this.myRTSession.session.activePeers[index] + \"|\";\r\n        }\r\n\r\n        console.log(this.myRTSession.session.peerId + \": \" + message + \" peers:\" + peers);\r\n    },\r\n\r\n    mainRTLoop()\r\n    {\r\n        if (this.myRTSession.started) {\r\n\t\t\tthis.myRTSession.session.update();\r\n\r\n\t\t\tvar data = RTData.get();\r\n\r\n\t\t\tdata.setLong(1, this.numCycles);\r\n\r\n            this.myRTSession.session.sendRTData(1, GameSparksRT.deliveryIntent.RELIABLE, data, []);\r\n\r\n\t\t\tthis.numCycles ++;\r\n\t\t}\r\n    },\r\n\r\n    registerOpCodeCallback(opCode, callback) {\r\n        if (!this.RTMessagesListeners[opCode]) {\r\n            this.RTMessagesListeners[opCode] = [];\r\n        }\r\n        this.RTMessagesListeners[opCode].push(callback);\r\n    },\r\n\r\n    triggerCallback(opCode, data) {\r\n        let listeners = this.RTMessagesListeners[opCode];\r\n        if (listeners) {\r\n            for (let i in listeners) {\r\n                listeners[i](data);\r\n            }\r\n        }\r\n    },\r\n\r\n    sendRTData(code, data)\r\n    {\r\n        this.myRTSession.session.sendRTData(code, GameSparksRT.deliveryIntent.RELIABLE, data, [0]);\r\n    },\r\n\r\n    //game\r\n    requestSeat(seat)\r\n    {\r\n        let data = RTData.get();\r\n            data.setLong(1, seat);\r\n\r\n        this.sendRTData(ServerCode.RQ_ENTER_SEAT, data);\r\n    },\r\n\r\n    leaveSeat(seat)\r\n    {\r\n        let data = RTData.get();\r\n            data.setLong(1, seat);\r\n\r\n        this.sendRTData(ServerCode.RQ_LEAVE_SEAT, data);\r\n    },\r\n\r\n    startGame()\r\n    {\r\n        let data = RTData.get();\r\n            data.setLong(1, 1);\r\n        this.sendRTData(ServerCode.RQ_START_GAME, data);\r\n    },\r\n\r\n    throwCards(cards)\r\n    {\r\n        let cardString = JSON.stringify(cards);\r\n        let data = RTData.get();\r\n            data.setString(1, cardString);\r\n        this.sendRTData(ServerCode.RQ_THROW_CARDS, data);\r\n    },\r\n\r\n    skipTurn()\r\n    {\r\n        let data = RTData.get();\r\n            data.setLong(1, 1);\r\n        this.sendRTData(ServerCode.RQ_SKIP_TURN, data);\r\n    }\r\n});"]}