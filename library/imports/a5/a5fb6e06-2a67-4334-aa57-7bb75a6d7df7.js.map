{"version":3,"sources":["../../../../../assets/Script/Game/assets/Script/Game/GameMgr.js"],"names":["Define","require","GameMgr","cc","Class","extends","Component","statics","instance","onLoad","game","addPersistRootNode","node","matchData","RegisterLeave","start","GSMgr","registerOpCodeCallback","ServerCode","RP_ENTER_SEAT","onPlayerEnterSeat","bind","RP_LEAVE_SEAT","onPlayerLeaveSeat","RP_LOAD_MATCH","onMatchLoad","RP_HOST_CHANGE","onHostChange","RP_STATE_UPDATE","onGameStateUpdate","RP_GET_CARDS","onCardsReceived","RP_TURN_CHANGE","onTurnChange","RP_THROW_SUCCESS","onThrowSuccess","RP_GAME_RESULT","onGameResult","RP_REGISTER_LEAVE","onPlayerRegisterLeave","onInit","startGameScene","OnMatchFound","message","console","log","JSON","stringify","onlineList","participants","OnMatchUpdate","hasOwnProperty","player","filter","id","addedPlayers","UIManager","addPlayer","removedPlayers","removePlayer","onMatchLoaded","callback","onMatchLoadedCb","parse","getString","getCurrentSeats","Seats","getPlayer","getOnlineList","getHost","Host","IsMeHost","userId","IsHost","playerId","UpdateUserInfo","getMyId","getMySeat","MySeat","IsMyId","seat","getLong","playerEnterSeat","onPlayerReady","isReady","PlayerReady","push","index","indexOf","splice","playerLeaveSeat","setHost","State","GameState","WAITING","onGameStateWaiting","READY","onGameStateReady","GAMEOVER","onGameOver","onGameWaiting","enableStartButton","cards","sort","a","b","startTime","timeout","TurnKeeper","TimeBeginTurn","scores","displayResult","isLeave","IsRegisterLeave"],"mappings":"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","file":"GameMgr.js","sourceRoot":"../../../../../assets/Script/Game","sourcesContent":["var Define = require(\"Define\");\r\nvar GameMgr = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    statics: {\r\n        instance: null\r\n    },\r\n\r\n    onLoad() {\r\n        GameMgr.instance = this;\r\n        cc.game.addPersistRootNode(this.node);\r\n        this.matchData = {};\r\n        this.RegisterLeave = 0;\r\n        //this.matchData.PlayerReady = [];\r\n    },\r\n\r\n    start() {\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_ENTER_SEAT, this.onPlayerEnterSeat.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_LEAVE_SEAT, this.onPlayerLeaveSeat.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_LOAD_MATCH, this.onMatchLoad.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_HOST_CHANGE, this.onHostChange.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_STATE_UPDATE, this.onGameStateUpdate.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_GET_CARDS, this.onCardsReceived.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_TURN_CHANGE, this.onTurnChange.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_THROW_SUCCESS, this.onThrowSuccess.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_GAME_RESULT, this.onGameResult.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_REGISTER_LEAVE, this.onPlayerRegisterLeave.bind(this));\r\n        //GSMgr.instance.registerOpCodeCallback(ServerCode.RP_PLAYER_READY, this.onPlayerReady.bind(this));\r\n        //remove design ready\r\n    },\r\n\r\n    onInit() {\r\n        this.startGameScene = true;\r\n    },\r\n\r\n    OnMatchFound(message) {\r\n        console.log(\"Game on match found \" + JSON.stringify(message));\r\n        this.onlineList = message.participants;\r\n    },\r\n\r\n    OnMatchUpdate(message) {\r\n        console.log(\"Game on match update \" + JSON.stringify(message));\r\n        this.onlineList = message.participants;\r\n        if (message.hasOwnProperty(\"addedPlayers\")) {\r\n            let player = this.onlineList.filter(player => player.id == message.addedPlayers)[0];\r\n            UIManager.instance.addPlayer(player);\r\n        }\r\n        if (message.hasOwnProperty(\"removedPlayers\")) {\r\n            let player = message.removedPlayers[0];\r\n            UIManager.instance.removePlayer(player);\r\n        }\r\n    },\r\n\r\n    onMatchLoaded(callback) {\r\n        this.onMatchLoadedCb = callback;\r\n    },\r\n\r\n    onMatchLoad(message) {\r\n        this.matchData = JSON.parse(message.getString(1));\r\n        if (this.onMatchLoadedCb)\r\n            this.onMatchLoadedCb();\r\n    },\r\n\r\n    getCurrentSeats() {\r\n        if (this.matchData)\r\n            return this.matchData.Seats;\r\n        return {};\r\n    },\r\n\r\n    getPlayer(id) {\r\n        return this.onlineList.filter(player => player.id == id)[0];\r\n    },\r\n\r\n    getOnlineList() {\r\n        return this.onlineList;\r\n    },\r\n\r\n    getHost() {\r\n        return this.matchData.Host;\r\n    },\r\n\r\n    IsMeHost()\r\n    {\r\n        return (this.userId == this.matchData.Host || this.matchData.Host == null);\r\n    },\r\n\r\n    IsHost(playerId)\r\n    {\r\n        return (playerId == this.matchData.Host || this.matchData.Host == null);\r\n    },\r\n\r\n    UpdateUserInfo(message) {\r\n        this.userId = message.userId;\r\n    },\r\n\r\n    getMyId() {\r\n        return this.userId;\r\n    },\r\n\r\n    getMySeat() {\r\n        return this.MySeat;\r\n    },\r\n\r\n    IsMyId(id) {\r\n        return this.userId == id;\r\n    },\r\n\r\n    onPlayerEnterSeat(message) {\r\n        let playerId = message.getString(1);\r\n        let seat = message.getLong(2);\r\n        this.matchData.Seats[seat] = playerId;\r\n        UIManager.instance.playerEnterSeat(this.getPlayer(playerId), seat);\r\n\r\n        if (this.IsMyId(playerId)) {\r\n            this.MySeat = seat;\r\n        }\r\n    },\r\n\r\n    onPlayerReady(message) {\r\n        let playerId = message.getString(1);\r\n        let isReady = message.getLong(2);\r\n        if (isReady)\r\n        {\r\n            this.matchData.PlayerReady.push(playerId);\r\n        }\r\n        else\r\n        {\r\n            let index = this.matchData.PlayerReady.indexOf(playerId);\r\n            this.matchData.PlayerReady.splice(index, 1);\r\n        }\r\n        UIManager.instance.onPlayerReady(playerId, isReady);\r\n    },\r\n\r\n    onPlayerLeaveSeat(message) {\r\n        let playerId = message.getString(1);\r\n        let seat = message.getLong(2);\r\n        this.matchData.Seats[seat] = null;\r\n        UIManager.instance.playerLeaveSeat(seat);\r\n\r\n        if (this.IsMyId(playerId)) {\r\n            this.MySeat = null;\r\n        }\r\n    },\r\n\r\n    onHostChange(message) {\r\n        let playerId = message.getString(1);\r\n        this.matchData.Host = playerId;\r\n        UIManager.instance.setHost(playerId);\r\n    },\r\n\r\n    onGameStateUpdate(message) {\r\n        this.matchData.State = message.getLong(1);\r\n        console.log('GameState Change ' + this.matchData.State);\r\n        switch (this.matchData.State) {\r\n            case Define.GameState.WAITING:\r\n                this.onGameStateWaiting();\r\n                break;\r\n\r\n            case Define.GameState.READY:\r\n                this.onGameStateReady();\r\n                break;\r\n\r\n            case Define.GameState.GAMEOVER:\r\n                this.onGameOver();\r\n                break;\r\n        }\r\n    },\r\n\r\n    onGameStateWaiting() {\r\n        UIManager.instance.onGameWaiting();\r\n    },\r\n\r\n    onGameStateReady() {\r\n        if (this.IsMyId(this.matchData.Host))\r\n            UIManager.instance.enableStartButton(true);\r\n    },\r\n\r\n    onGameOver() {\r\n        UIManager.instance.onGameOver();\r\n    },\r\n\r\n    onCardsReceived(message) {\r\n        let cards = JSON.parse(message.getString(1));\r\n        cards.sort((a, b) => a - b);\r\n        UIManager.instance.onCardsReceived(cards);\r\n    },\r\n\r\n    onTurnChange(message) {\r\n        let playerId = message.getString(1);\r\n        let startTime = message.getLong(2);\r\n        let timeout = message.getLong(3);\r\n        this.matchData.TurnKeeper = playerId;\r\n        this.matchData.TimeBeginTurn = startTime;\r\n        UIManager.instance.onTurnChange(playerId, startTime, timeout);\r\n    },\r\n\r\n    onThrowSuccess(message) {\r\n        let playerId = message.getString(1);\r\n        let cards = JSON.parse(message.getString(2));\r\n        UIManager.instance.onThrowSuccess(playerId, cards);\r\n    },\r\n\r\n    onGameResult(message)\r\n    {\r\n        let scores = JSON.parse(message.getString(1));\r\n        UIManager.instance.displayResult(scores);\r\n    },\r\n\r\n    onPlayerRegisterLeave(message)\r\n    {\r\n        let isLeave = message.getLong(1);\r\n        this.RegisterLeave = isLeave;\r\n        UIManager.instance.onPlayerRegisterLeave(isLeave);\r\n    },\r\n\r\n    IsRegisterLeave()\r\n    {\r\n        return this.RegisterLeave;\r\n    }\r\n});"]}