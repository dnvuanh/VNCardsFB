{"version":3,"sources":["../../../../../assets/Script/Game/assets/Script/Game/GameMgr.js"],"names":["Define","require","GameMgr","cc","Class","extends","Component","statics","instance","onLoad","game","addPersistRootNode","node","matchData","start","GSMgr","registerOpCodeCallback","ServerCode","RP_ENTER_SEAT","onPlayerEnterSeat","bind","RP_LEAVE_SEAT","onPlayerLeaveSeat","RP_LOAD_MATCH","onMatchLoad","RP_HOST_CHANGE","onHostChange","RP_STATE_UPDATE","onGameStateUpdate","RP_GET_CARDS","onCardsReceived","RP_TURN_CHANGE","onTurnChange","RP_THROW_SUCCESS","onThrowSuccess","RP_GAME_RESULT","onGameResult","onInit","startGameScene","OnMatchFound","message","console","log","JSON","stringify","onlineList","participants","OnMatchUpdate","hasOwnProperty","player","filter","id","addedPlayers","UIManager","addPlayer","removedPlayers","removePlayer","onMatchLoaded","callback","onMatchLoadedCb","parse","getString","getCurrentSeats","Seats","getPlayer","getOnlineList","getHost","Host","UpdateUserInfo","userId","getMyId","getMySeat","MySeat","IsMyId","playerId","seat","getLong","playerEnterSeat","playerLeaveSeat","setHost","State","GameState","WAITING","onGameStateWaiting","READY","onGameStateReady","GAMEOVER","onGameOver","enableStartButton","cards","sort","a","b","startTime","timeout","TurnKeeper","TimeBeginTurn","scores","displayResult"],"mappings":"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","file":"GameMgr.js","sourceRoot":"../../../../../assets/Script/Game","sourcesContent":["var Define = require(\"Define\");\r\nvar GameMgr = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    statics: {\r\n        instance: null\r\n    },\r\n\r\n    onLoad() {\r\n        GameMgr.instance = this;\r\n        cc.game.addPersistRootNode(this.node);\r\n        this.matchData = {};\r\n    },\r\n\r\n    start() {\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_ENTER_SEAT, this.onPlayerEnterSeat.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_LEAVE_SEAT, this.onPlayerLeaveSeat.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_LOAD_MATCH, this.onMatchLoad.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_HOST_CHANGE, this.onHostChange.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_STATE_UPDATE, this.onGameStateUpdate.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_GET_CARDS, this.onCardsReceived.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_TURN_CHANGE, this.onTurnChange.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_THROW_SUCCESS, this.onThrowSuccess.bind(this));\r\n        GSMgr.instance.registerOpCodeCallback(ServerCode.RP_GAME_RESULT, this.onGameResult.bind(this));\r\n    },\r\n\r\n    onInit() {\r\n        this.startGameScene = true;\r\n    },\r\n\r\n    OnMatchFound(message) {\r\n        console.log(\"Game on match found \" + JSON.stringify(message));\r\n        this.onlineList = message.participants;\r\n    },\r\n\r\n    OnMatchUpdate(message) {\r\n        console.log(\"Game on match update \" + JSON.stringify(message));\r\n        this.onlineList = message.participants;\r\n        if (message.hasOwnProperty(\"addedPlayers\")) {\r\n            let player = this.onlineList.filter(player => player.id == message.addedPlayers)[0];\r\n            UIManager.instance.addPlayer(player);\r\n        }\r\n        if (message.hasOwnProperty(\"removedPlayers\")) {\r\n            let player = message.removedPlayers[0];\r\n            UIManager.instance.removePlayer(player);\r\n        }\r\n    },\r\n\r\n    onMatchLoaded(callback) {\r\n        this.onMatchLoadedCb = callback;\r\n    },\r\n\r\n    onMatchLoad(message) {\r\n        this.matchData = JSON.parse(message.getString(1));\r\n        if (this.onMatchLoadedCb)\r\n            this.onMatchLoadedCb();\r\n    },\r\n\r\n    getCurrentSeats() {\r\n        if (this.matchData)\r\n            return this.matchData.Seats;\r\n        return {};\r\n    },\r\n\r\n    getPlayer(id) {\r\n        return this.onlineList.filter(player => player.id == id)[0];\r\n    },\r\n\r\n    getOnlineList() {\r\n        return this.onlineList;\r\n    },\r\n\r\n    getHost() {\r\n        return this.matchData.Host;\r\n    },\r\n\r\n    UpdateUserInfo(message) {\r\n        this.userId = message.userId;\r\n    },\r\n\r\n    getMyId() {\r\n        return this.userId;\r\n    },\r\n\r\n    getMySeat() {\r\n        return this.MySeat;\r\n    },\r\n\r\n    IsMyId(id) {\r\n        return this.userId == id;\r\n    },\r\n\r\n    onPlayerEnterSeat(message) {\r\n        let playerId = message.getString(1);\r\n        let seat = message.getLong(2);\r\n        this.matchData.Seats[seat] = playerId;\r\n        UIManager.instance.playerEnterSeat(this.getPlayer(playerId), seat);\r\n\r\n        if (this.IsMyId(playerId)) {\r\n            this.MySeat = seat;\r\n        }\r\n    },\r\n\r\n    onPlayerLeaveSeat(message) {\r\n        let playerId = message.getString(1);\r\n        let seat = message.getLong(2);\r\n        this.matchData.Seats[seat] = null;\r\n        UIManager.instance.playerLeaveSeat(seat);\r\n\r\n        if (this.IsMyId(playerId)) {\r\n            this.MySeat = null;\r\n        }\r\n    },\r\n\r\n    onHostChange(message) {\r\n        let playerId = message.getString(1);\r\n        this.matchData.Host = playerId;\r\n        UIManager.instance.setHost(playerId);\r\n    },\r\n\r\n    onGameStateUpdate(message) {\r\n        this.matchData.State = message.getLong(1);\r\n        console.log('GameState Change ' + this.matchData.State);\r\n        switch (this.matchData.State) {\r\n            case Define.GameState.WAITING:\r\n                this.onGameStateWaiting();\r\n                break;\r\n\r\n            case Define.GameState.READY:\r\n                this.onGameStateReady();\r\n                break;\r\n\r\n            case Define.GameState.GAMEOVER:\r\n                this.onGameOver();\r\n                break;\r\n        }\r\n    },\r\n\r\n    onGameStateWaiting() {\r\n        if (this.IsMyId(this.matchData.Host))\r\n            UIManager.instance.enableStartButton(false);\r\n    },\r\n\r\n    onGameStateReady() {\r\n        if (this.IsMyId(this.matchData.Host))\r\n            UIManager.instance.enableStartButton(true);\r\n    },\r\n\r\n    onGameOver() {\r\n        UIManager.instance.onGameOver();\r\n    },\r\n\r\n    onCardsReceived(message) {\r\n        let cards = JSON.parse(message.getString(1));\r\n        cards.sort((a, b) => a - b);\r\n        UIManager.instance.onCardsReceived(cards);\r\n    },\r\n\r\n    onTurnChange(message) {\r\n        let playerId = message.getString(1);\r\n        let startTime = message.getLong(2);\r\n        let timeout = message.getLong(3);\r\n        this.matchData.TurnKeeper = playerId;\r\n        this.matchData.TimeBeginTurn = startTime;\r\n        UIManager.instance.onTurnChange(playerId, startTime, timeout);\r\n    },\r\n\r\n    onThrowSuccess(message) {\r\n        let playerId = message.getString(1);\r\n        let cards = JSON.parse(message.getString(2));\r\n        UIManager.instance.onThrowSuccess(playerId, cards);\r\n    },\r\n\r\n    onGameResult(message)\r\n    {\r\n        let scores = JSON.parse(message.getString(1));\r\n        UIManager.instance.displayResult(scores);\r\n    }\r\n});"]}