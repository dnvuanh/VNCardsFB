{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\Util/assets\\Script\\Util\\GameHelper.js"],"names":["cc","Class","cardValue","card","isSame","cards","length","i","isStraight","parseCards","sort","a","b","result","setType","Define","SetType","ERROR","numOfCard","topCard","STRAIGHT","SINGLE","PAIR","TRIPLE","QUADS","THREEPAIRS","FOURPAIRS","validTurn","previous","current","HEO"],"mappings":"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","file":"GameHelper.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Util","sourcesContent":["cc.Class({\r\n    cardValue(card) \r\n    {\r\n        return card / 4 | 0;\r\n    },\r\n\r\n    isSame(cards)\r\n    {\r\n        if(cards.length < 2) {\r\n            return false;\r\n        }\r\n\r\n        for(let i = 1; i < cards.length; i++) {\r\n            if(this.cardValue(cards[0]) != this.cardValue(cards[i])) {\r\n                    return false;\r\n                }\r\n        }\r\n    return true;\r\n    },\r\n\r\n    isStraight(cards)\r\n    {\r\n        if(cards.length < 3) {\r\n            return false;\r\n        }\r\n\r\n        for(let i = 0; i < cards.length - 1; i++) {\r\n            if(this.cardValue(cards[i]) - this.cardValue(cards[i+1]) != 1){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    parseCards(cards) \r\n    {  \r\n        cards.sort((a,b) => b - a);\r\n        var result = {setType: Define.SetType.ERROR, numOfCard:\"\", topCard: \"\"};\r\n        result.numOfCard = cards.length;\r\n        result.topCard = cards[0];\r\n\r\n        if(this.isStraight(cards))\r\n        {\r\n            result.setType = Define.SetType.STRAIGHT;\r\n            return result;\r\n        }\r\n        \r\n        switch (cards.length) {\r\n        case 1:\r\n            result.setType = Define.SetType.SINGLE;\r\n            break;\r\n        case 2:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.PAIR;\r\n            }\r\n            break;\r\n        case 3:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.TRIPLE;\r\n            }\r\n            break;\r\n        case 4:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.QUADS;\r\n            }\r\n            break;\r\n        case 6:\r\n            if(this.isSame([cards[0], cards[1]]) &&\r\n                this.isSame([cards[2], cards[3]]) &&\r\n                this.isSame([cards[4], cards[5]]) &&\r\n                this.isStraight([cards[0], cards[2], cards[4]])) {\r\n                    result.setType = Define.SetType.THREEPAIRS;\r\n                }\r\n            break;\r\n        case 8:\r\n            if(this.isSame([cards[0], cards[1]]) &&\r\n                this.isSame([cards[2], cards[3]]) &&\r\n                this.isSame([cards[4], cards[5]]) &&\r\n                this.isSame([cards[6], cards[7]]) &&\r\n                this.isStraight([cards[0], cards[2], cards[4], cards[6]])) {\r\n                    result.setType = Define.SetType.FOURPAIRS;\r\n                }\r\n            break;\r\n        default:\r\n        }\r\n        return result;\r\n    },\r\n\r\n    validTurn(previous, current)\r\n    {\r\n        const HEO = 15;\r\n        if(previous.setType >= Define.SetType.THREEPAIRS){\r\n            return current.SetType * 100 + current.topCard > previous.SetType * 100 + previous.topCard;\r\n        } else if(this.cardValue(previous.topCard) == HEO && current.setType >= Define.SetType.THREEPAIRS) {\r\n            return true;\r\n        } else if(current.setType == previous.setType \r\n            && current.numOfCard == previous.numOfCard \r\n            && current.topCard > previous.topCard)  {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});\r\n"]}