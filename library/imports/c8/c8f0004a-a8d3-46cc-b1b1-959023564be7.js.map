{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\Util/assets\\Script\\Util\\GameHelper.js"],"names":["GameHelper","cc","Class","cardValue","card","isSame","cards","length","i","isStraight","parseCards","sort","a","b","result","setType","Define","SetType","ERROR","numOfCard","topCard","STRAIGHT","SINGLE","PAIR","TRIPLE","QUADS","THREEPAIRS","FOURPAIRS","validTurn","previousSet","current","PIG","currentSet","getLoseResultType","bInstant","RESULT","LOSE","FROZEN","HasDeadPig","DEAD2","HasBurned","BURNED","len","weight","Has3ContPairs","HasQuads","Has4ContPairs","module","exports"],"mappings":"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","file":"GameHelper.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Util","sourcesContent":["var GameHelper = cc.Class({\r\n    cardValue(card) \r\n    {\r\n        return card / 4 | 0;\r\n    },\r\n\r\n    isSame(cards)\r\n    {\r\n        if(cards.length < 2) {\r\n            return false;\r\n        }\r\n\r\n        for(let i = 1; i < cards.length; i++) {\r\n            if(this.cardValue(cards[0]) != this.cardValue(cards[i])) {\r\n                    return false;\r\n                }\r\n        }\r\n    return true;\r\n    },\r\n\r\n    isStraight(cards)\r\n    {\r\n        if(cards.length < 3) {\r\n            return false;\r\n        }\r\n\r\n        for(let i = 0; i < cards.length - 1; i++) {\r\n            if(this.cardValue(cards[i]) - this.cardValue(cards[i+1]) != 1){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    parseCards(cards) \r\n    {  \r\n        cards.sort((a,b) => b - a);\r\n        var result = {setType: Define.SetType.ERROR, numOfCard:\"\", topCard: \"\"};\r\n        result.numOfCard = cards.length;\r\n        result.topCard = cards[0];\r\n\r\n        if(this.isStraight(cards))\r\n        {\r\n            result.setType = Define.SetType.STRAIGHT;\r\n            return result;\r\n        }\r\n        \r\n        switch (cards.length) {\r\n        case 1:\r\n            result.setType = Define.SetType.SINGLE;\r\n            break;\r\n        case 2:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.PAIR;\r\n            }\r\n            break;\r\n        case 3:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.TRIPLE;\r\n            }\r\n            break;\r\n        case 4:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.QUADS;\r\n            }\r\n            break;\r\n        case 6:\r\n            if(this.isSame([cards[0], cards[1]]) &&\r\n                this.isSame([cards[2], cards[3]]) &&\r\n                this.isSame([cards[4], cards[5]]) &&\r\n                this.isStraight([cards[0], cards[2], cards[4]])) {\r\n                    result.setType = Define.SetType.THREEPAIRS;\r\n                }\r\n            break;\r\n        case 8:\r\n            if(this.isSame([cards[0], cards[1]]) &&\r\n                this.isSame([cards[2], cards[3]]) &&\r\n                this.isSame([cards[4], cards[5]]) &&\r\n                this.isSame([cards[6], cards[7]]) &&\r\n                this.isStraight([cards[0], cards[2], cards[4], cards[6]])) {\r\n                    result.setType = Define.SetType.FOURPAIRS;\r\n                }\r\n            break;\r\n        default:\r\n        }\r\n        return result;\r\n    },\r\n\r\n    validTurn(previousSet, current)\r\n    {\r\n        const PIG = 15;\r\n        var currentSet = this.parseCards(current);\r\n        if(currentSet.setType == Define.SetType.ERROR)  {\r\n            return false;\r\n        }\r\n        if(previousSet === null) {\r\n            return true;\r\n        }\r\n        if(previousSet.setType >= Define.SetType.THREEPAIRS){\r\n            return currentSet.setType * 100 + currentSet.topCard > previousSet.setType * 100 + previousSet.topCard;\r\n        } else if(this.cardValue(previousSet.topCard) == PIG && currentSet.setType >= Define.SetType.THREEPAIRS) {\r\n            return true;\r\n        } else if(currentSet.setType == previousSet.setType \r\n            && currentSet.numOfCard == previousSet.numOfCard \r\n            && currentSet.topCard > previousSet.topCard)  {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    getLoseResultType(bInstant, cards)\r\n    {\r\n        var result = Define.RESULT.LOSE;\r\n        if(!bInstant && cards.length == 13)  {\r\n            result |= Define.RESULT.FROZEN;\r\n        }\r\n        if(this.HasDeadPig(cards)) {\r\n            result |= Define.RESULT.DEAD2;\r\n        }\r\n        if(this.HasBurned(cards))\r\n        {\r\n            result |= Define.RESULT.BURNED;\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    HasDeadPig(cards)\r\n    {\r\n        const PIG = 15;\r\n        for(var i = 0, len = cards.length; i < len; i++)\r\n        {\r\n            if(this.cardValue(cards[i]) == PIG) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    HasBurned(cards)\r\n    {\r\n        var weight = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        for(var i = 0, len = cards.length; i < len; i++)\r\n        {\r\n            weight[this.cardValue(cards[i]) - 3]++;\r\n            if(weight[i] == 4) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        //do not need at current. just check if burned or not.\r\n        //if(this.HasQuads(weight) || this.Has4ContPairs(weight) || this.Has3ContPairs(weight))\r\n        if(this.Has3ContPairs(weight))\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    HasQuads(weight)\r\n    {\r\n        // already did when building weight array\r\n        // for(var i = 0; i < 13; i++)\r\n        // {\r\n        //     if(weight[i] == 4) {\r\n        //         return true;\r\n        //     }\r\n        // }\r\n        return false;\r\n    },\r\n\r\n    Has4ContPairs(weight)\r\n    {\r\n        for(var i = 0; i < 10; i++)\r\n        {\r\n            if(weight[i] > 1 && weight[i+1] > 1 && weight[i+2]  > 1 && weight[i+3]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    Has3ContPairs(weight)\r\n    {\r\n        for(var i = 0; i < 10; i++)\r\n        {\r\n            if(weight[i] > 1 && weight[i+1] > 1 && weight[i+2]  > 1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n});\r\n\r\nmodule.exports = new GameHelper();"]}