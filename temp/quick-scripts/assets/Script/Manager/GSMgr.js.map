{"version":3,"sources":["GSMgr.js"],"names":["GSMgr","cc","Class","extends","Component","properties","APIKey","String","Secret","statics","instance","ctor","onLoad","game","addPersistRootNode","node","Init","callback","Inited","GameSparks","callbackInit","initPreview","key","secret","credential","onNonce","bind","onInit","onMessage","logger","console","log","initRTSession","nonce","CryptoJS","enc","Base64","stringify","HmacSHA256","message","GameMgr","OnMatchFound","accessToken","host","port","myRTSession","stop","myTimer","clearTimeout","setInterval","mainRTLoop","startRTSession","OnMatchUpdate","registrationRequest","displayName","username","password","photo","onResponse","request","sendWithData","authenticationRequest","enterRoomRequest","gameType","groupName","createChallengeRequest","shortCode","minPlayers","maxPlayers","numCycles","started","onPlayerConnect","onPlayerConnected","onPlayerDisconnect","onPlayerDisconnected","onReady","onSessionReady","onPacket","onPacketReceived","session","start","stopRTSession","res","connectToken","index","indexOf","theHost","slice","GameSparksRT","getSession","peers","activePeers","peerId","update","data","RTData","get","setLong","sendRTData","deliveryIntent","RELIABLE","code","requestSeat","seat","ServerCode","RQ_ENTER_SEAT"],"mappings":"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","file":"GSMgr.js","sourceRoot":"../../../../../assets/Script/Manager","sourcesContent":["var GSMgr = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        APIKey: cc.String,\n        Secret: cc.String,\n    },\n    \n    statics:\n    {\n        instance: null,\n    },\n\n    ctor: function () {\n        \n    },\n    \n    onLoad()\n    {\n        GSMgr.instance = this;\n        cc.game.addPersistRootNode(this.node);\n    },\n\n    Init (callback) {\n        this.Inited = false;\n        this.GameSparks = new GameSparks();\n        this.callbackInit = callback;\n\n\t\tthis.GameSparks.initPreview({\n\t\t\tkey: this.APIKey, \n\t\t\tsecret: this.Secret,\n\t\t\tcredential: \"\",\n\t\t\tonNonce: this.onNonce.bind(this),\n\t\t\tonInit: this.onInit.bind(this),\n\t\t\tonMessage: this.onMessage.bind(this),\n\t\t\tlogger: console.log,\n        });\n        this.initRTSession();\n    },\n        \n    onNonce(nonce)\n    {\n        return CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(nonce, this.Secret));\n    },\n    \n    onInit()\n    {\n        this.Inited = true;\n        this.callbackInit();\n    },\n    \n    onMessage(message)\n    {\n        switch (message[\"@class\"]) {\n            case \".MatchFoundMessage\":\n                GameMgr.instance.OnMatchFound(message);\n                var accessToken = message[\"accessToken\"];\n\t\t\t    var host = message[\"host\"];\n\t\t\t    var port = message[\"port\"];\n    \t\t\tthis.myRTSession.stop();\n                if (this.myTimer) {\n                    clearTimeout(this.myTimer);\n                }\n\t\t\t    this.myTimer = setInterval(this.mainRTLoop.bind(this), 10);\n\t\t\t    this.startRTSession(accessToken, host, port);\n                break;\n\n            case \".MatchUpdatedMessage\":\n                GameMgr.instance.OnMatchUpdate(message);\n                break;\n        }\n    },\n\n    registrationRequest(displayName, username, password, photo, onResponse)\n    {\n        var request = {};\n            request[\"displayName\"] = displayName;\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n            request[\"scriptData\"] = {\n                \"InstantID\":username,\n                \"Photo\":photo\n            }\n        this.GameSparks.sendWithData(\"RegistrationRequest\", request, onResponse);\n    },\n\n    authenticationRequest(username, password, onResponse)\n    {\n        var request = {};\n            request[\"userName\"] = username;\n            request[\"password\"] = password;\n        \n        this.GameSparks.sendWithData(\"AuthenticationRequest\", request, onResponse);\n    },\n\n    enterRoomRequest(gameType, groupName, onResponse)\n    {\n        var request = {};\n            request[\"matchShortCode\"] = gameType;\n            request[\"matchGroup\"] = groupName;\n            request[\"skill\"] = 0;\n        \n        this.GameSparks.sendWithData(\"MatchmakingRequest\", request, onResponse);\n    },\n\n    createChallengeRequest(shortCode, minPlayers, maxPlayers, onResponse)\n    {\n        var request = {};\n            request[\"challengeShortCode\"] = shortCode;\n            request[\"maxPlayers\"] = maxPlayers;\n            request[\"minPlayers\"] = minPlayers;\n            request[\"accessType\"] = \"PUBLIC\";\n            request[\"endTime\"] = \"2030-07-24T00:53Z\";\n\n        this.GameSparks.sendWithData(\"CreateChallengeRequest\", request, onResponse);\n    },\n\n    initRTSession() {\n        this.myTimer = null;\n        this.numCycles = 0;\n        this.myRTSession = {\n            started: false,\n            onPlayerConnect: this.onPlayerConnected.bind(this),\n            onPlayerDisconnect: this.onPlayerDisconnected.bind(this),\n            onReady: this.onSessionReady.bind(this),\n            onPacket: this.onPacketReceived.bind(this),\n            session: null,\n            start: this.startRTSession.bind(this),\n            stop: this.stopRTSession.bind(this),\n            log: this.log.bind(this)\n        }\n    },\n\n    onPlayerConnected(res) {\n        console.log(\"onPlayerConnectedCB\", res);\n    },\n\n    onPlayerDisconnected(res) {\n        console.log(\"onPlayerDisconnected\", res);\n    },\n\n    onSessionReady(res) {\n        cc.log(\"onSessionReady\", res);\n    },\n\n    onPacketReceived(res) {\n        cc.log(\"onPacketReceived\", res);\n    },\n\n    startRTSession(connectToken, host, port) {\n        var index = host.indexOf(\":\");\n        var theHost;\n\n        if (index > 0) {\n            theHost = host.slice(0, index);\n        } else {\n            theHost = host;\n        }\n\n        console.log(theHost + \" : \" + port);\n\n        this.myRTSession.session = GameSparksRT.getSession(connectToken, theHost, port, this.myRTSession);\n        if (this.myRTSession.session != null) {\n            this.myRTSession.started = true;\n\n            this.myRTSession.session.start();\n        } else {\n            this.myRTSession.started = false;\n        }\n    },\n\n    stopRTSession() {\n        this.myRTSession.started = false;\n\n        if (this.myRTSession.session != null) {\n            this.myRTSession.session.stop();\n        }\n    },\n\n    log(message) {\n        let peers = \"|\";\n\n        for (var index in this.myRTSession.session.activePeers) {\n            peers = peers + this.myRTSession.session.activePeers[index] + \"|\";\n        }\n\n        console.log(this.myRTSession.session.peerId + \": \" + message + \" peers:\" + peers);\n    },\n\n    mainRTLoop()\n    {\n        if (this.myRTSession.started) {\n\t\t\tthis.myRTSession.session.update();\n\n\t\t\tvar data = RTData.get();\n\n\t\t\tdata.setLong(1, this.numCycles);\n\n\t\t\tthis.myRTSession.session.sendRTData(1, GameSparksRT.deliveryIntent.RELIABLE, data, []);\n\n\t\t\tthis.numCycles ++;\n\t\t}\n    },\n\n    sendRTData(code, data)\n    {\n        this.myRTSession.session.sendRTData(code, GameSparksRT.deliveryIntent.RELIABLE, data, [0]);\n    },\n\n    //game\n    requestSeat(seat)\n    {\n        let data = RTData.get();\n            data.setLong(1, seat);\n\n        this.sendRTData(ServerCode.RQ_ENTER_SEAT, data);\n    }\n});"]}