{"version":3,"sources":["MenuGame.js"],"names":["MenuScene","require","ObjectPool","cc","Class","extends","properties","onlineList","chatBox","SeatMgr","DealCards","ButtonLeave","Node","ButtonStart","ButtonReady","PlayingButtons","myCardNode","friendCardNode","rightPanelNode","showRightButton","Button","throwButton","skipButton","playZoneNode","countDown","ResultDisplay","onLoad","active","node","getComponent","addPlayer","player","removePlayer","requestSeat","sender","seat","console","log","GSMgr","instance","parseInt","requestLeaveSeat","leaveSeat","GameMgr","IsRegisterLeave","playerEnterSeat","playerInfo","onPlayerEnter","IsMyId","id","playerLeaveSeat","getMySeat","enableStartButton","onPlayerLeave","setHost","playerId","enable","chatBoxClick","onlineClick","onStartGameClick","startGame","children","forEach","it","beginNewGame","hideResultIcon","previousCards","previousThrowPlayer","PlayDealCardAnim","cards","cardCount","startAnim","card","getCard","setParent","onCardsReceived","playAnim","i","length","onShowRightMenuClick","position","getPosition","getSelectedCards","SelectedCards","cardList","getComponentsInChildren","IsSelected","push","throwCards","skipTurn","onTurnChange","startTime","timeout","checkThrowable","interactable","beginNewWave","GameHelper","validTurn","onThrowSuccess","MAX_CARD_ON_HAND","parseCards","removeCardsFromHand","sort","a","b","getChildByName","onDeselect","setPosition","onGameWaiting","IsMeHost","hide","recall","onGameOver","stopAllTurn","displayResult","scores","playerWinId","playersCards","display","onPlayerReady","isReady","onReadyPressed","requestPlayerReady","onPlayerRegisterLeave","isLeave","getComponentInChildren","Label","string","onGameStateReady","timeStamp","show","Define","TIME_FORCE_START","onGameStart","refreshSeats","Seats","getPlayerSeat"],"mappings":";;;;;;AACA,IAAIA,YAAYC,QAAQ,WAAR,CAAhB;AACA,IAAIC,aAAaD,QAAQ,YAAR,CAAjB;;AAEAE,GAAGC,KAAH,CAAS;AACLC,aAASL,SADJ;;AAGLM,gBAAY;AACRC,oBAAYN,QAAQ,YAAR,CADJ;AAERO,iBAASP,QAAQ,SAAR,CAFD;AAGRQ,iBAASR,QAAQ,SAAR,CAHD;AAIRS,mBAAWT,QAAQ,WAAR,CAJH;AAKRU,qBAAaR,GAAGS,IALR;AAMRC,qBAAaV,GAAGS,IANR;AAORE,qBAAaX,GAAGS,IAPR;AAQRG,wBAAgBZ,GAAGS,IARX;AASRI,oBAAYb,GAAGS,IATP;AAURK,wBAAgBd,GAAGS,IAVX;AAWRM,wBAAgBf,GAAGS,IAXX;AAYRO,yBAAiBhB,GAAGiB,MAZZ;AAaRC,qBAAalB,GAAGiB,MAbR;AAcRE,oBAAYnB,GAAGiB,MAdP;AAeRG,sBAAcpB,GAAGS,IAfT;AAgBRY,mBAAWvB,QAAQ,WAAR,CAhBH;AAiBRwB,uBAAetB,GAAGS;AAjBV,KAHP;;AAuBLc,UAvBK,oBAwBL;AACI,aAAKf,WAAL,CAAiBgB,MAAjB,GAA0B,KAA1B;AACA,aAAKd,WAAL,CAAiBc,MAAjB,GAA0B,KAA1B;AACA,aAAKb,WAAL,CAAiBa,MAAjB,GAA0B,KAA1B;AACA,aAAKZ,cAAL,CAAoBY,MAApB,GAA6B,KAA7B;AACA,aAAKpB,UAAL,CAAgBqB,IAAhB,CAAqBD,MAArB,GAA8B,IAA9B;AACA,aAAKnB,OAAL,CAAaoB,IAAb,CAAkBD,MAAlB,GAA2B,KAA3B;AACA;AACA,aAAKF,aAAL,GAAqB,KAAKA,aAAL,CAAmBI,YAAnB,CAAgC,eAAhC,CAArB;AACH,KAjCI;AAmCLC,aAnCK,qBAmCKC,MAnCL,EAoCL;AACI,aAAKxB,UAAL,CAAgBuB,SAAhB,CAA0BC,MAA1B;AACH,KAtCI;AAwCLC,gBAxCK,wBAwCQD,MAxCR,EAyCL;AACI,aAAKxB,UAAL,CAAgByB,YAAhB,CAA6BD,MAA7B;AACH,KA3CI;AA6CLE,eA7CK,uBA6COC,MA7CP,EA6CeC,IA7Cf,EA8CL;AACIC,gBAAQC,GAAR,CAAY,cAAZ;AACAC,cAAMC,QAAN,CAAeN,WAAf,CAA2BO,SAASL,IAAT,CAA3B;AACH,KAjDI;AAmDLM,oBAnDK,8BAoDL;AACIH,cAAMC,QAAN,CAAeG,SAAf,CAAyB,IAAIC,QAAQJ,QAAR,CAAiBK,eAAjB,EAA7B;AACH,KAtDI;AAwDLC,mBAxDK,2BAwDWC,UAxDX,EAwDuBX,IAxDvB,EAyDL;AACI;AACA,aAAK1B,OAAL,CAAasC,aAAb,CAA2BD,UAA3B,EAAuCX,IAAvC;AACA,YAAIQ,QAAQJ,QAAR,CAAiBS,MAAjB,CAAwBF,WAAWG,EAAnC,CAAJ,EACA;AACI,iBAAKtC,WAAL,CAAiBgB,MAAjB,GAA0B,IAA1B;AACH;AACJ,KAhEI;AAkELuB,mBAlEK,2BAkEWf,IAlEX,EAmEL;AACI,YAAIQ,QAAQJ,QAAR,CAAiBY,SAAjB,MAAgChB,IAApC,EACA;AACI,iBAAKxB,WAAL,CAAiBgB,MAAjB,GAA0B,KAA1B;AACA,iBAAKyB,iBAAL,CAAuB,KAAvB;AACH;AACD,aAAK3C,OAAL,CAAa4C,aAAb,CAA2BlB,IAA3B;AACH,KA1EI;AA4ELmB,WA5EK,mBA4EGC,QA5EH,EA6EL;AACI,aAAK9C,OAAL,CAAa6C,OAAb,CAAqBC,QAArB;AACH,KA/EI;AAiFLH,qBAjFK,6BAiFaI,MAjFb,EAiFqB;AACtB,aAAK3C,WAAL,CAAiBc,MAAjB,GAA0B6B,MAA1B;AACH,KAnFI;AAqFLC,gBArFK,0BAsFL;AACI,aAAKlD,UAAL,CAAgBqB,IAAhB,CAAqBD,MAArB,GAA8B,KAA9B;AACA,aAAKnB,OAAL,CAAaoB,IAAb,CAAkBD,MAAlB,GAA2B,IAA3B;AACH,KAzFI;AA2FL+B,eA3FK,yBA4FL;AACI,aAAKnD,UAAL,CAAgBqB,IAAhB,CAAqBD,MAArB,GAA8B,IAA9B;AACA,aAAKnB,OAAL,CAAaoB,IAAb,CAAkBD,MAAlB,GAA2B,KAA3B;AACH,KA/FI;AAiGLgC,oBAjGK,8BAkGL;AACIrB,cAAMC,QAAN,CAAeqB,SAAf;AACA,aAAK3C,cAAL,CAAoB4C,QAApB,CAA6BC,OAA7B,CAAqC;AAAA,mBAAMC,GAAGpC,MAAH,GAAY,KAAlB;AAAA,SAArC;AACH,KArGI;AAuGLqC,gBAvGK,0BAwGL;AACI,aAAKnD,WAAL,CAAiBc,MAAjB,GAA0B,KAA1B;AACA,aAAKF,aAAL,CAAmBwC,cAAnB;AACA,aAAKlD,cAAL,CAAoBY,MAApB,GAA6B,IAA7B;AACA,aAAKuC,aAAL,GAAqB,IAArB;AACA,aAAKC,mBAAL,GAA2B,IAA3B;AACH,KA9GI;AAgHLC,oBAhHK,4BAgHYC,KAhHZ,EAiHL;AAAA;;AACI,YAAIC,YAAY,CAAhB;AACA,aAAK5D,SAAL,CAAe6D,SAAf,CAAyB,YAAI;AACzB,gBAAIC,OAAOtE,WAAWqC,QAAX,CAAoBkC,OAApB,CAA4BJ,MAAMC,SAAN,CAA5B,CAAX;AACIE,oBAAQA,KAAKE,SAAL,CAAe,MAAK1D,UAApB,CAAR;AACJ,gBAAIsD,aAAa,CAAjB,EACA;AACI,sBAAKrD,cAAL,CAAoB4C,QAApB,CAA6BC,OAA7B,CAAqC;AAAA,2BAAMC,GAAGpC,MAAH,GAAY,IAAlB;AAAA,iBAArC;AACH;AACD2C,yBAAa,CAAb;AACH,SARD;AASH,KA5HI;AA8HLK,mBA9HK,2BA8HWN,KA9HX,EA8HkBO,QA9HlB,EA+HL;AACI,aAAKZ,YAAL;AACA,YAAIY,QAAJ,EACI,KAAKR,gBAAL,CAAsBC,KAAtB,EADJ,KAGA;AACI,iBAAK,IAAIQ,IAAE,CAAX,EAAcA,IAAER,MAAMS,MAAtB,EAA8BD,GAA9B,EACA;AACI,oBAAIL,OAAOtE,WAAWqC,QAAX,CAAoBkC,OAApB,CAA4BJ,MAAMQ,CAAN,CAA5B,CAAX;AACIL,wBAAQA,KAAKE,SAAL,CAAe,KAAK1D,UAApB,CAAR;AACP;AACJ;AACJ,KA3II;AA6IL+D,wBA7IK,kCA8IL;AACI,YAAIC,WAAW,KAAK7D,eAAL,CAAqBS,IAArB,CAA0BqD,WAA1B,EAAf;AACA,YAAI,KAAK/D,cAAL,CAAoBS,MAApB,IAA8B,IAAlC,EAAwC;AACpC,iBAAKT,cAAL,CAAoBS,MAApB,GAA6B,KAA7B;AACA;AACA;AACH;AACD,aAAKT,cAAL,CAAoBS,MAApB,GAA6B,IAA7B;AACA;AACH,KAvJI;AAyJLuD,oBAzJK,8BA0JL;AACI,YAAIC,gBAAgB,EAApB;AACA,YAAIC,WAAW,KAAKpE,UAAL,CAAgBqE,uBAAhB,CAAwC,MAAxC,CAAf;AACID,iBAAStB,OAAT,CAAiB,gBAAQ;AACrB,gBAAIU,KAAKc,UAAL,EAAJ,EACAH,cAAcI,IAAd,CAAmBf,KAAKC,OAAL,EAAnB;AACH,SAHD;AAIJ,eAAOU,aAAP;AACH,KAlKI;AAoKLK,cApKK,wBAqKL;AACI,YAAInB,QAAQ,KAAKa,gBAAL,EAAZ;AACA5C,cAAMC,QAAN,CAAeiD,UAAf,CAA0BnB,KAA1B;AACH,KAxKI;AA0KLoB,YA1KK,sBA2KL;AACInD,cAAMC,QAAN,CAAekD,QAAf;AACH,KA7KI;AA+KLC,gBA/KK,wBA+KQnC,QA/KR,EA+KkBoC,SA/KlB,EA+K6BC,OA/K7B,EAgLL;AACI,aAAKnF,OAAL,CAAaiF,YAAb,CAA0BnC,QAA1B,EAAoCoC,SAApC,EAA+CC,OAA/C;AACA,aAAK7E,cAAL,CAAoBY,MAApB,GAA6BgB,QAAQJ,QAAR,CAAiBS,MAAjB,CAAwBO,QAAxB,CAA7B;AACA,aAAKsC,cAAL;AACA,aAAKvE,UAAL,CAAgBwE,YAAhB,GAA+B,IAA/B;AACA,YAAG,KAAK3B,mBAAL,IAA4BZ,QAA/B,EACA;AACI,iBAAKwC,YAAL;AACH;AACJ,KAzLI;AA2LLA,gBA3LK,0BA4LL;AACI,aAAK7B,aAAL,GAAqB,IAArB;AACA,aAAK5C,UAAL,CAAgBwE,YAAhB,GAA+B,KAA/B;AACA,YAAIV,WAAW,KAAK7D,YAAL,CAAkB8D,uBAAlB,CAA0C,MAA1C,CAAf;AACID,iBAAStB,OAAT,CAAiB,gBAAQ;AACrBU,iBAAK5C,IAAL,CAAUD,MAAV,GAAmB,KAAnB;AACH,SAFD;AAGP,KAnMI;AAqMLkE,kBArMK,4BAsML;AACI,aAAKxE,WAAL,CAAiByE,YAAjB,GAAgCE,WAAWC,SAAX,CAAqB,KAAK/B,aAA1B,EAAyC,KAAKgB,gBAAL,EAAzC,CAAhC;AACH,KAxMI;AA0MLgB,kBA1MK,0BA0MU3C,QA1MV,EA0MoBc,KA1MpB,EA2ML;AACI,YAAM8B,mBAAmB,EAAzB;AACA,aAAKjC,aAAL,GAAqB8B,WAAWI,UAAX,CAAsB/B,KAAtB,CAArB;AACA,aAAKgC,mBAAL,CAAyB9C,QAAzB,EAAmCc,KAAnC;AACA,aAAKF,mBAAL,GAA2BZ,QAA3B;AACH,KAhNI;AAkNL8C,uBAlNK,+BAkNe9C,QAlNf,EAkNyBc,KAlNzB,EAmNL;AAAA;;AACI,YAAIe,WAAW,KAAK7D,YAAL,CAAkB8D,uBAAlB,CAA0C,MAA1C,CAAf;AACID,iBAAStB,OAAT,CAAiB,gBAAQ;AACrBU,iBAAK5C,IAAL,CAAUD,MAAV,GAAmB,KAAnB;AACH,SAFD;;AAIJ0C,cAAMiC,IAAN,CAAW,UAACC,CAAD,EAAGC,CAAH;AAAA,mBAASD,IAAIC,CAAb;AAAA,SAAX;AACA,YAAG7D,QAAQJ,QAAR,CAAiBS,MAAjB,CAAwBO,QAAxB,CAAH,EAAsC;AAClCc,kBAAMP,OAAN,CAAc,cAAM;AAChB,oBAAIU,OAAO,OAAKxD,UAAL,CAAgByF,cAAhB,CAA+B,UAAU1C,EAAzC,CAAX;AACAS,qBAAK3C,YAAL,CAAkB,MAAlB,EAA0B6E,UAA1B;AACAlC,qBAAKE,SAAL,CAAe,OAAKnD,YAApB;AACAiD,qBAAKmC,WAAL,CAAiB,CAAjB,EAAoB,CAApB;AACH,aALD;AAMH,SAPD,MAOO;AACHtC,kBAAMP,OAAN,CAAc,cAAM;AAChB,oBAAIU,OAAOtE,WAAWqC,QAAX,CAAoBkC,OAApB,CAA4BV,EAA5B,CAAX;AACAS,qBAAKE,SAAL,CAAe,OAAKnD,YAApB;AACAiD,qBAAKmC,WAAL,CAAiB,CAAjB,EAAoB,CAApB;AACH,aAJD;AAKH;AACJ,KAxOI;AA0OLC,iBA1OK,2BA2OL;AACI,YAAIjE,QAAQJ,QAAR,CAAiBsE,QAAjB,EAAJ,EACI,KAAKzD,iBAAL,CAAuB,KAAvB;;AAEJ,aAAK5B,SAAL,CAAesF,IAAf;AACA,eAAO,KAAK9F,UAAL,CAAgB6C,QAAhB,CAAyBiB,MAAzB,GAAkC,CAAzC,EACA;AACI,iBAAK9D,UAAL,CAAgB6C,QAAhB,CAAyB,CAAzB,EAA4B8C,WAA5B,CAAwC,CAAxC,EAA0C,CAA1C;AACAzG,uBAAWqC,QAAX,CAAoBwE,MAApB,CAA2B,KAAK/F,UAAL,CAAgB6C,QAAhB,CAAyB,CAAzB,CAA3B;AACH;;AAED,eAAO,KAAKtC,YAAL,CAAkBsC,QAAlB,CAA2BiB,MAA3B,GAAoC,CAA3C,EACA;AACI,iBAAKvD,YAAL,CAAkBsC,QAAlB,CAA2B,CAA3B,EAA8B8C,WAA9B,CAA0C,CAA1C,EAA4C,CAA5C;AACAzG,uBAAWqC,QAAX,CAAoBwE,MAApB,CAA2B,KAAKxF,YAAL,CAAkBsC,QAAlB,CAA2B,CAA3B,CAA3B;AACH;;AAED,aAAK5C,cAAL,CAAoB4C,QAApB,CAA6BC,OAA7B,CAAqC;AAAA,mBAAMC,GAAGpC,MAAH,GAAY,KAAlB;AAAA,SAArC;AACH,KA7PI;AA+PLqF,cA/PK,wBAgQL;AACI,aAAKvG,OAAL,CAAawG,WAAb;AACA,aAAKlG,cAAL,CAAoBY,MAApB,GAA6B,KAA7B;AACA,aAAKuC,aAAL,GAAqB,IAArB;AACH,KApQI;AAsQLgD,iBAtQK,yBAsQSC,MAtQT,EAsQiBC,WAtQjB,EAsQ8BC,YAtQ9B,EAuQL;AACI;AACA;AACA;AACA;AACAjF,gBAAQC,GAAR,CAAY8E,MAAZ;AACA,aAAKlG,cAAL,CAAoB4C,QAApB,CAA6BC,OAA7B,CAAqC;AAAA,mBAAMC,GAAGpC,MAAH,GAAY,KAAlB;AAAA,SAArC;AACA,YAAI0F,aAAaD,WAAb,EAA0BtC,MAA1B,IAAoC,EAAxC,EAA4C;AAC5C;AACI,qBAAKd,YAAL;AACH;AACD,aAAKvC,aAAL,CAAmB6F,OAAnB,CAA2BF,WAA3B,EAAwCC,YAAxC;AACH,KAnRI;AAqRLE,iBArRK,yBAqRShE,QArRT,EAqRmBiE,OArRnB,EAsRL;AACI,aAAK/G,OAAL,CAAa8G,aAAb,CAA2BhE,QAA3B,EAAqCiE,OAArC;AACA,YAAI7E,QAAQJ,QAAR,CAAiBS,MAAjB,CAAwBO,QAAxB,CAAJ,EACA;AACI,iBAAKzC,WAAL,CAAiBa,MAAjB,GAA0B,CAAC6F,OAA3B;AACH;AACJ,KA5RI;AA8RLC,kBA9RK,4BA+RL;AACInF,cAAMC,QAAN,CAAemF,kBAAf,CAAkC,IAAlC;AACH,KAjSI;AAmSLC,yBAnSK,iCAmSiBC,OAnSjB,EAoSL;AACI,YAAIA,OAAJ,EACI,KAAKjH,WAAL,CAAiBkH,sBAAjB,CAAwC1H,GAAG2H,KAA3C,EAAkDC,MAAlD,GAA2D,SAA3D,CADJ,KAGI,KAAKpH,WAAL,CAAiBkH,sBAAjB,CAAwC1H,GAAG2H,KAA3C,EAAkDC,MAAlD,GAA2D,OAA3D;AACP,KAzSI;AA2SLC,oBA3SK,4BA2SYC,SA3SZ,EA4SL;AACI,YAAItF,QAAQJ,QAAR,CAAiBsE,QAAjB,EAAJ,EACA;AACI,iBAAKzD,iBAAL,CAAuB,IAAvB;AACH;AACD,aAAK5B,SAAL,CAAeI,IAAf,CAAoBD,MAApB,GAA6B,IAA7B;AACA,aAAKH,SAAL,CAAe0G,IAAf,CAAoBD,SAApB,EAA+BE,OAAOC,gBAAtC;AACH,KAnTI;AAqTLC,eArTK,yBAsTL;AACI,aAAKxH,WAAL,CAAiBc,MAAjB,GAA0B,KAA1B;AACA,aAAKb,WAAL,CAAiBa,MAAjB,GAA0B,KAA1B;AACA,aAAKH,SAAL,CAAesF,IAAf;AACH,KA1TI;AA4TLwB,gBA5TK,wBA4TQC,KA5TR,EA6TL;AACI,aAAK9H,OAAL,CAAa6H,YAAb,CAA0BC,KAA1B;AACH,KA/TI;AAiULC,iBAjUK,yBAiUSjF,QAjUT,EAkUL;AACI,eAAO,KAAK9C,OAAL,CAAa+H,aAAb,CAA2BjF,QAA3B,CAAP;AACH;AApUI,CAAT","file":"MenuGame.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\UI","sourcesContent":["\r\nvar MenuScene = require(\"MenuScene\");\r\nvar ObjectPool = require(\"ObjectPool\");\r\n\r\ncc.Class({\r\n    extends: MenuScene,\r\n\r\n    properties: {\r\n        onlineList: require(\"OnlineList\"),\r\n        chatBox: require(\"ChatBox\"),\r\n        SeatMgr: require(\"SeatMgr\"),\r\n        DealCards: require(\"DealCards\"),\r\n        ButtonLeave: cc.Node,\r\n        ButtonStart: cc.Node,\r\n        ButtonReady: cc.Node,\r\n        PlayingButtons: cc.Node,\r\n        myCardNode: cc.Node,\r\n        friendCardNode: cc.Node,\r\n        rightPanelNode: cc.Node,\r\n        showRightButton: cc.Button,\r\n        throwButton: cc.Button,\r\n        skipButton: cc.Button,\r\n        playZoneNode: cc.Node,\r\n        countDown: require(\"CountDown\"),\r\n        ResultDisplay: cc.Node,\r\n    },\r\n\r\n    onLoad()\r\n    {\r\n        this.ButtonLeave.active = false;\r\n        this.ButtonStart.active = false;\r\n        this.ButtonReady.active = false;\r\n        this.PlayingButtons.active = false;\r\n        this.onlineList.node.active = true;\r\n        this.chatBox.node.active = false;\r\n        //this.seatOccupied = [false, false, false, false];\r\n        this.ResultDisplay = this.ResultDisplay.getComponent(\"ResultDisplay\");\r\n    },\r\n\r\n    addPlayer(player)\r\n    {\r\n        this.onlineList.addPlayer(player);\r\n    },\r\n\r\n    removePlayer(player)\r\n    {\r\n        this.onlineList.removePlayer(player);\r\n    },\r\n\r\n    requestSeat(sender, seat)\r\n    {\r\n        console.log(\"request Seat\");\r\n        GSMgr.instance.requestSeat(parseInt(seat));\r\n    },\r\n\r\n    requestLeaveSeat()\r\n    {\r\n        GSMgr.instance.leaveSeat(1 - GameMgr.instance.IsRegisterLeave());\r\n    },\r\n\r\n    playerEnterSeat(playerInfo, seat)\r\n    {\r\n        //this.seatOccupied[seat] = true;\r\n        this.SeatMgr.onPlayerEnter(playerInfo, seat);\r\n        if (GameMgr.instance.IsMyId(playerInfo.id))\r\n        {\r\n            this.ButtonLeave.active = true;\r\n        }\r\n    },\r\n\r\n    playerLeaveSeat(seat)\r\n    {\r\n        if (GameMgr.instance.getMySeat() == seat)\r\n        {\r\n            this.ButtonLeave.active = false;\r\n            this.enableStartButton(false);\r\n        }\r\n        this.SeatMgr.onPlayerLeave(seat);\r\n    },\r\n\r\n    setHost(playerId)\r\n    {\r\n        this.SeatMgr.setHost(playerId);\r\n    },\r\n\r\n    enableStartButton(enable) {\r\n        this.ButtonStart.active = enable;\r\n    },\r\n\r\n    chatBoxClick()\r\n    {\r\n        this.onlineList.node.active = false;\r\n        this.chatBox.node.active = true;\r\n    },\r\n\r\n    onlineClick()\r\n    {\r\n        this.onlineList.node.active = true;\r\n        this.chatBox.node.active = false;\r\n    },\r\n\r\n    onStartGameClick()\r\n    {\r\n        GSMgr.instance.startGame();\r\n        this.friendCardNode.children.forEach(it => it.active = false);\r\n    },\r\n\r\n    beginNewGame()\r\n    {\r\n        this.ButtonStart.active = false;\r\n        this.ResultDisplay.hideResultIcon();\r\n        this.PlayingButtons.active = true;\r\n        this.previousCards = null;\r\n        this.previousThrowPlayer = null;\r\n    },\r\n\r\n    PlayDealCardAnim(cards)\r\n    {\r\n        let cardCount = 0;\r\n        this.DealCards.startAnim(()=>{\r\n            let card = ObjectPool.instance.getCard(cards[cardCount]);\r\n                card && card.setParent(this.myCardNode);\r\n            if (cardCount == 0)\r\n            {\r\n                this.friendCardNode.children.forEach(it => it.active = true);\r\n            }\r\n            cardCount += 1;\r\n        });\r\n    },\r\n\r\n    onCardsReceived(cards, playAnim)\r\n    {\r\n        this.beginNewGame();\r\n        if (playAnim)\r\n            this.PlayDealCardAnim(cards);\r\n        else\r\n        {\r\n            for (let i=0; i<cards.length; i++)\r\n            {\r\n                let card = ObjectPool.instance.getCard(cards[i]);\r\n                    card && card.setParent(this.myCardNode);\r\n            }\r\n        }\r\n    },\r\n\r\n    onShowRightMenuClick()\r\n    {\r\n        var position = this.showRightButton.node.getPosition();\r\n        if (this.rightPanelNode.active == true) {\r\n            this.rightPanelNode.active = false;\r\n            //this.showRightLabel.string = \"<<\";\r\n            return;\r\n        }\r\n        this.rightPanelNode.active = true;\r\n        //this.showRightLabel.string = \">>\";\r\n    },\r\n\r\n    getSelectedCards()\r\n    {\r\n        var SelectedCards = [];\r\n        let cardList = this.myCardNode.getComponentsInChildren(\"Card\");\r\n            cardList.forEach(card => {\r\n                if (card.IsSelected())\r\n                SelectedCards.push(card.getCard());\r\n            })\r\n        return SelectedCards;\r\n    },\r\n\r\n    throwCards()\r\n    {\r\n        let cards = this.getSelectedCards();\r\n        GSMgr.instance.throwCards(cards);\r\n    },\r\n\r\n    skipTurn()\r\n    {\r\n        GSMgr.instance.skipTurn();\r\n    },\r\n\r\n    onTurnChange(playerId, startTime, timeout)\r\n    {\r\n        this.SeatMgr.onTurnChange(playerId, startTime, timeout);\r\n        this.PlayingButtons.active = GameMgr.instance.IsMyId(playerId);\r\n        this.checkThrowable();\r\n        this.skipButton.interactable = true;\r\n        if(this.previousThrowPlayer == playerId)\r\n        {\r\n            this.beginNewWave();\r\n        }\r\n    },\r\n\r\n    beginNewWave()\r\n    {\r\n        this.previousCards = null;\r\n        this.skipButton.interactable = false;\r\n        let cardList = this.playZoneNode.getComponentsInChildren(\"Card\");\r\n            cardList.forEach(card => {\r\n                card.node.active = false;\r\n            });\r\n    },\r\n\r\n    checkThrowable()\r\n    {\r\n        this.throwButton.interactable = GameHelper.validTurn(this.previousCards, this.getSelectedCards());\r\n    },\r\n\r\n    onThrowSuccess(playerId, cards)\r\n    {\r\n        const MAX_CARD_ON_HAND = 13;\r\n        this.previousCards = GameHelper.parseCards(cards);\r\n        this.removeCardsFromHand(playerId, cards);\r\n        this.previousThrowPlayer = playerId;\r\n    },\r\n\r\n    removeCardsFromHand(playerId, cards)\r\n    {\r\n        let cardList = this.playZoneNode.getComponentsInChildren(\"Card\");\r\n            cardList.forEach(card => {\r\n                card.node.active = false;\r\n            });\r\n            \r\n        cards.sort((a,b) => a - b);\r\n        if(GameMgr.instance.IsMyId(playerId)) {\r\n            cards.forEach(it => {\r\n                let card = this.myCardNode.getChildByName(\"Card_\" + it);\r\n                card.getComponent(\"Card\").onDeselect();\r\n                card.setParent(this.playZoneNode);\r\n                card.setPosition(0, 0);\r\n            });\r\n        } else {\r\n            cards.forEach(it => {\r\n                let card = ObjectPool.instance.getCard(it);                \r\n                card.setParent(this.playZoneNode);\r\n                card.setPosition(0, 0);\r\n            });\r\n        }\r\n    },\r\n\r\n    onGameWaiting()\r\n    {\r\n        if (GameMgr.instance.IsMeHost())\r\n            this.enableStartButton(false);\r\n        \r\n        this.countDown.hide();\r\n        while (this.myCardNode.children.length > 0)\r\n        {\r\n            this.myCardNode.children[0].setPosition(0,0);\r\n            ObjectPool.instance.recall(this.myCardNode.children[0]);\r\n        }\r\n\r\n        while (this.playZoneNode.children.length > 0)\r\n        {\r\n            this.playZoneNode.children[0].setPosition(0,0);\r\n            ObjectPool.instance.recall(this.playZoneNode.children[0]);\r\n        }\r\n\r\n        this.friendCardNode.children.forEach(it => it.active = false);\r\n    },\r\n\r\n    onGameOver()\r\n    {\r\n        this.SeatMgr.stopAllTurn();\r\n        this.PlayingButtons.active = false;\r\n        this.previousCards = null;\r\n    },\r\n\r\n    displayResult(scores, playerWinId, playersCards)\r\n    {\r\n        // if(playersCards[playerWinId].length == 13)\r\n        // {\r\n        //     this.PlayDealCardAnim(playersCards[GameMgr.instance.getMyId()]);\r\n        // }\r\n        console.log(scores);\r\n        this.friendCardNode.children.forEach(it => it.active = false);\r\n        if (playersCards[playerWinId].length == 13) //instant win\r\n        {\r\n            this.beginNewGame();\r\n        }\r\n        this.ResultDisplay.display(playerWinId, playersCards);\r\n    },\r\n\r\n    onPlayerReady(playerId, isReady)\r\n    {\r\n        this.SeatMgr.onPlayerReady(playerId, isReady);\r\n        if (GameMgr.instance.IsMyId(playerId))\r\n        {\r\n            this.ButtonReady.active = !isReady;\r\n        }\r\n    },\r\n\r\n    onReadyPressed()\r\n    {\r\n        GSMgr.instance.requestPlayerReady(true);\r\n    },\r\n\r\n    onPlayerRegisterLeave(isLeave)\r\n    {\r\n        if (isLeave)\r\n            this.ButtonLeave.getComponentInChildren(cc.Label).string = \"Unleave\";\r\n        else\r\n            this.ButtonLeave.getComponentInChildren(cc.Label).string = \"Leave\";\r\n    },\r\n\r\n    onGameStateReady(timeStamp)\r\n    {\r\n        if (GameMgr.instance.IsMeHost())\r\n        {\r\n            this.enableStartButton(true);\r\n        }\r\n        this.countDown.node.active = true;\r\n        this.countDown.show(timeStamp, Define.TIME_FORCE_START);\r\n    },\r\n\r\n    onGameStart()\r\n    {\r\n        this.ButtonStart.active = false;\r\n        this.ButtonReady.active = false;\r\n        this.countDown.hide();\r\n    },\r\n\r\n    refreshSeats(Seats)\r\n    {\r\n        this.SeatMgr.refreshSeats(Seats);\r\n    },\r\n\r\n    getPlayerSeat(playerId)\r\n    {\r\n        return this.SeatMgr.getPlayerSeat(playerId);\r\n    }\r\n});\r\n"]}