{"version":3,"sources":["SeatDisplay.js"],"names":["ObjectPool","require","cc","Class","extends","Component","properties","displayNode","Node","avatar","Sprite","userName","Label","money","hostIcon","turnCountDown","ProgressBar","resultIcon","cardsNode","onLoad","active","node","IsMyTurn","getComponent","display","playerInfo","playerId","id","photo","scriptData","Photo","displayName","ImageCache","loadAvatar","imgSprite","spriteFrame","console","log","string","getPlayerId","remove","setHost","isHost","displayTurn","startTime","timeout","timeStartTurn","timeoutTurnMill","timeEndTurn","disableCountDown","hideResultIcon","hide","displayWinResult","bInstantWin","cards","displayCards","Define","RESULT","INSTANT","WIN","displayLoseResult","resultType","GameHelper","getLoseResultType","idx","forEach","card","instance","getCard","it","setParent","setScale","setPosition","RecallCards","children","length","recall","update","dt","timeNow","Date","now","percent","progress","setReady","isReady","opacity"],"mappings":"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","file":"SeatDisplay.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\UI","sourcesContent":["var ObjectPool = require(\"ObjectPool\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        displayNode: cc.Node,\r\n        avatar: cc.Sprite,\r\n        userName: cc.Label,\r\n        money: cc.Label,\r\n        hostIcon: cc.Node,\r\n        turnCountDown: cc.ProgressBar,\r\n        resultIcon: cc.Node,\r\n        cardsNode: cc.Node,\r\n    },\r\n\r\n    onLoad()\r\n    {\r\n        this.displayNode.active = false;\r\n        this.hostIcon.active = false;\r\n        this.turnCountDown.node.active = false;\r\n        this.IsMyTurn = false;\r\n        this.resultIcon.active = false;\r\n        this.resultIcon = this.resultIcon.getComponent(\"ResultIcon\");\r\n        this.cardsNode.active = false;\r\n    },\r\n\r\n    display(playerInfo)\r\n    {\r\n        this.playerId = playerInfo.id;\r\n        let photo = playerInfo.scriptData.Photo;\r\n        let displayName = playerInfo.displayName;\r\n\r\n        ImageCache.loadAvatar(this.playerId, photo, (imgSprite)=>{\r\n            if (imgSprite)\r\n            {\r\n                this.avatar.spriteFrame = imgSprite;\r\n            }\r\n            else\r\n            {\r\n                console.log(\"Error while loading user avatar \" + this.playerId);\r\n            }\r\n            this.userName.string = displayName;\r\n            this.displayNode.active = true;\r\n        });\r\n    },\r\n\r\n    getPlayerId()\r\n    {\r\n        return this.playerId;\r\n    },\r\n\r\n    remove()\r\n    {\r\n        this.playerId = null;\r\n        this.hostIcon.active = false;\r\n        this.displayNode.active = false;\r\n    },\r\n\r\n    setHost(isHost)\r\n    {\r\n        this.hostIcon.active = isHost;\r\n    },\r\n\r\n    displayTurn(startTime, timeout)\r\n    {\r\n        this.turnCountDown.node.active = true;\r\n        this.timeStartTurn = startTime;\r\n        this.timeoutTurnMill = timeout * 1000;\r\n        this.timeEndTurn = this.timeStartTurn + this.timeoutTurnMill;\r\n        this.IsMyTurn = true;\r\n    },\r\n\r\n    disableCountDown()\r\n    {\r\n        this.IsMyTurn = false;\r\n        this.turnCountDown.node.active = false;\r\n    },\r\n\r\n    hideResultIcon()\r\n    {\r\n        this.resultIcon.hide();\r\n    }, \r\n\r\n    displayWinResult(bInstantWin, cards)\r\n    {\r\n        if(bInstantWin) \r\n        {\r\n            this.displayCards(cards);\r\n            this.resultIcon.display(Define.RESULT.INSTANT);\r\n        }\r\n        else \r\n        {\r\n            this.resultIcon.display(Define.RESULT.WIN);\r\n        }\r\n    },\r\n\r\n    displayLoseResult(bInstantWin, cards)\r\n    {   \r\n        this.displayCards(cards);\r\n        var resultType = GameHelper.getLoseResultType(bInstantWin, cards);\r\n        this.resultIcon.display(resultType);\r\n    },\r\n\r\n    displayCards(cards)\r\n    {\r\n        let idx = 0;\r\n        this.cardsNode.active = true;\r\n        cards.forEach(it => {\r\n            let card = ObjectPool.instance.getCard(it);\r\n            if(card != null)                \r\n            {\r\n                card.setParent(this.cardsNode);\r\n                card.setScale(0.5, 0.5);\r\n                card.setPosition(0, 0);\r\n            }\r\n        });\r\n    },\r\n\r\n    RecallCards()\r\n    {\r\n        while (this.cardsNode.children.length > 0)\r\n        {\r\n            this.cardsNode.children[0].setPosition(0, 0);\r\n            this.cardsNode.children[0].setScale(1, 1);\r\n            ObjectPool.instance.recall(this.cardsNode.children[0]);\r\n        }\r\n        this.cardsNode.active = false;\r\n    },\r\n\r\n    update(dt)\r\n    {\r\n        if (this.IsMyTurn)\r\n        {\r\n            let timeNow = Date.now();\r\n            let percent = (this.timeEndTurn - timeNow) / this.timeoutTurnMill;\r\n            if (percent > 0)\r\n            {\r\n                this.turnCountDown.progress = percent;\r\n            }\r\n            else\r\n            {\r\n                this.IsMyTurn = false;\r\n                this.turnCountDown.progress = 0;\r\n                this.turnCountDown.node.active = false;\r\n            }\r\n        }\r\n    },\r\n\r\n    setReady(isReady)\r\n    {\r\n        if (isReady)\r\n        {\r\n            this.node.opacity = 255;\r\n        }\r\n        else\r\n        {\r\n            this.node.opacity = 125;\r\n        }\r\n    }\r\n});\r\n"]}