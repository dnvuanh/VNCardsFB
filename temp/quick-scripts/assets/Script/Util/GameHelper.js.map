{"version":3,"sources":["GameHelper.js"],"names":["Define","require","GameHelper","cc","Class","cardValue","card","isSame","cards","length","i","isStraight","parseCards","sort","a","b","result","setType","SetType","ERROR","numOfCard","topCard","STRAIGHT","SINGLE","PAIR","TRIPLE","QUADS","THREEPAIRS","FOURPAIRS","validTurn","previousSet","current","HEO","currentSet","module","exports"],"mappings":"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","file":"GameHelper.js","sourceRoot":"../../../../../assets/Script/Util","sourcesContent":["var Define = require(\"Define\");\r\nvar GameHelper = cc.Class({\r\n    cardValue(card) \r\n    {\r\n        return card / 4 | 0;\r\n    },\r\n\r\n    isSame(cards)\r\n    {\r\n        if(cards.length < 2) {\r\n            return false;\r\n        }\r\n\r\n        for(let i = 1; i < cards.length; i++) {\r\n            if(this.cardValue(cards[0]) != this.cardValue(cards[i])) {\r\n                    return false;\r\n                }\r\n        }\r\n    return true;\r\n    },\r\n\r\n    isStraight(cards)\r\n    {\r\n        if(cards.length < 3) {\r\n            return false;\r\n        }\r\n\r\n        for(let i = 0; i < cards.length - 1; i++) {\r\n            if(this.cardValue(cards[i]) - this.cardValue(cards[i+1]) != 1){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    parseCards(cards) \r\n    {  \r\n        cards.sort((a,b) => b - a);\r\n        var result = {setType: Define.SetType.ERROR, numOfCard:\"\", topCard: \"\"};\r\n        result.numOfCard = cards.length;\r\n        result.topCard = cards[0];\r\n\r\n        if(this.isStraight(cards))\r\n        {\r\n            result.setType = Define.SetType.STRAIGHT;\r\n            return result;\r\n        }\r\n        \r\n        switch (cards.length) {\r\n        case 1:\r\n            result.setType = Define.SetType.SINGLE;\r\n            break;\r\n        case 2:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.PAIR;\r\n            }\r\n            break;\r\n        case 3:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.TRIPLE;\r\n            }\r\n            break;\r\n        case 4:\r\n            if(this.isSame(cards)) {\r\n                result.setType = Define.SetType.QUADS;\r\n            }\r\n            break;\r\n        case 6:\r\n            if(this.isSame([cards[0], cards[1]]) &&\r\n                this.isSame([cards[2], cards[3]]) &&\r\n                this.isSame([cards[4], cards[5]]) &&\r\n                this.isStraight([cards[0], cards[2], cards[4]])) {\r\n                    result.setType = Define.SetType.THREEPAIRS;\r\n                }\r\n            break;\r\n        case 8:\r\n            if(this.isSame([cards[0], cards[1]]) &&\r\n                this.isSame([cards[2], cards[3]]) &&\r\n                this.isSame([cards[4], cards[5]]) &&\r\n                this.isSame([cards[6], cards[7]]) &&\r\n                this.isStraight([cards[0], cards[2], cards[4], cards[6]])) {\r\n                    result.setType = Define.SetType.FOURPAIRS;\r\n                }\r\n            break;\r\n        default:\r\n        }\r\n        return result;\r\n    },\r\n\r\n    validTurn(previousSet, current)\r\n    {\r\n        const HEO = 15;\r\n        var currentSet = this.parseCards(current);\r\n        if(currentSet.setType == Define.SetType.ERROR)  {\r\n            return false;\r\n        }\r\n        if(previousSet === null) {\r\n            return true;\r\n        }\r\n        if(previousSet.setType >= Define.SetType.THREEPAIRS){\r\n            return currentSet.SetType * 100 + currentSet.topCard > previousSet.SetType * 100 + previousSet.topCard;\r\n        } else if(this.cardValue(previousSet.topCard) == HEO && currentSet.setType >= Define.SetType.THREEPAIRS) {\r\n            return true;\r\n        } else if(currentSet.setType == previousSet.setType \r\n            && currentSet.numOfCard == previousSet.numOfCard \r\n            && currentSet.topCard > previousSet.topCard)  {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});\r\n\r\nmodule.exports = new GameHelper();"]}